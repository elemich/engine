#include "interfaces.h"

AppInterface::AppInterface():timerMain(0),mainAppWindow(0),compiler(0){}

EditorWindowContainer::EditorWindowContainer()
{
	resizeDiffHeight=0;
	resizeDiffWidth=0;
	resizeEnumType=-1;
	resizeCheckWidth=0;
	resizeCheckHeight=0;
}




///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////TouchInput//////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////

TouchInput::TouchInput()
{
	for(int i=0;i<10;i++)
	{
		pressed[i]=0;
		released[i]=0;
		position[i].make(0,0);
	}
}

bool TouchInput::IsPressed(int i){return pressed[i];}
bool TouchInput::IsReleased(int i){return released[i];}

void TouchInput::SetPressed(bool b,int i){pressed[i]=b;}
void TouchInput::SetReleased(bool b,int i){released[i]=b;}


vec2& TouchInput::GetPosition(int i){return position[i];}
void   TouchInput::SetPosition(vec2& pos,int i){position[i]=pos;}

MouseInput::MouseInput()
{}

bool MouseInput::Left(){return this->left;}
bool MouseInput::Right(){return this->right;}
bool MouseInput::Middle(){return this->middle;}

TouchInput InputManager::touchInput;
MouseInput InputManager::mouseInput;
KeyboardInput InputManager::keyboardInput;
/*
InputInterface InputManager::voiceInput;
InputInterface InputManager::joystickInput;*/


///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////


#define MATRIXSTACK_ARRAY_SIZES 64


float matrixstack[MatrixStack::MATRIXMODE_MAX][MATRIXSTACK_ARRAY_SIZES][16];
int	  levels[MatrixStack::MATRIXMODE_MAX];
int	  mode;

mat4 MatrixStack::model;
mat4 MatrixStack::projection;
mat4 MatrixStack::view;

void MatrixStack::Reset()
	
{
	mode=MatrixStack::MODEL;

	for(int i=0;i<MatrixStack::MATRIXMODE_MAX;i++)
		for(int j=0;j<MATRIXSTACK_ARRAY_SIZES;j++)
			MatrixMathNamespace::identity(matrixstack[i][j]);

	levels[0]=levels[1]=0;
}



float* MatrixStack::Get(MatrixStack::matrixmode m,int lev)
{
	return matrixstack[m][(lev<0 ? levels[m] : lev)];
}

float* MatrixStack::Get()
{
	return Get((MatrixStack::matrixmode)mode);
}


void MatrixStack::SetProjectionMatrix(float* pm)
{
	memcpy(matrixstack[MatrixStack::PROJECTION][levels[MatrixStack::PROJECTION]],pm,sizeof(float)*16);
}
void MatrixStack::SetModelMatrix(float* mm)
{
	memcpy(matrixstack[MatrixStack::MODEL][levels[MatrixStack::MODEL]],mm,sizeof(float)*16);
}
void MatrixStack::SetViewMatrix(float* mm)
{
	memcpy(matrixstack[MatrixStack::VIEW][levels[MatrixStack::VIEW]],mm,sizeof(float)*16);
}

mat4 MatrixStack::GetProjectionMatrix()
{
	if(!matrixstack[PROJECTION][levels[PROJECTION]])
		__debugbreak();

	return matrixstack[PROJECTION][levels[PROJECTION]];
}
mat4 MatrixStack::GetModelMatrix()
{
	if(!matrixstack[MODEL][levels[MODEL]])
		__debugbreak();

	return matrixstack[MODEL][levels[MODEL]];
}

mat4 MatrixStack::GetViewMatrix()
{
	if(!matrixstack[VIEW][levels[VIEW]])
		__debugbreak();

	return matrixstack[VIEW][levels[VIEW]];
}


void MatrixStack::Push()
{
	Push((MatrixStack::matrixmode)mode);
}

void MatrixStack::Pop()
{
	Pop((MatrixStack::matrixmode)mode);
}



void MatrixStack::Identity()
{
	Identity((MatrixStack::matrixmode)mode);
}

void MatrixStack::Identity(MatrixStack::matrixmode m)
{
	MatrixMathNamespace::identity(Get(m));
}

void MatrixStack::Load(float* m)
{
	memcpy(matrixstack[mode][levels[mode]],m,sizeof(float)*16);
}

void MatrixStack::Load(MatrixStack::matrixmode md,float* m)
{
	memcpy(matrixstack[md][levels[md]],m,sizeof(float)*16);
}

void MatrixStack::Multiply(float* m)
{
	/*MatrixMathNamespace::multiply(m,matrixstack[mode][levels[mode]]);
	SetMatrix((MatrixStack::matrixmode)mode,m);*/
	MatrixMathNamespace::multiply(matrixstack[mode][levels[mode]],m);
}

void MatrixStack::Multiply(MatrixStack::matrixmode m,float* mtx)
{
	MatrixMathNamespace::multiply(Get(m),mtx);
}

void MatrixStack::Push(MatrixStack::matrixmode m)
{
	if(levels[m]<(MATRIXSTACK_ARRAY_SIZES-1))
	{
		levels[m]++;
		memcpy(matrixstack[m][levels[m]],matrixstack[m][levels[m]-1],sizeof(float)*16);
	}
}

void MatrixStack::Push(MatrixStack::matrixmode m,float* mtx)
{
	if(levels[m]<(MATRIXSTACK_ARRAY_SIZES-1))
	{
		levels[m]++;
		memcpy(matrixstack[m][levels[m]],mtx,sizeof(float)*16);
	}
}



void MatrixStack::Pop(MatrixStack::matrixmode m)
{
	if(levels[m]>0)
	{
		levels[m]--;
	}
}



void MatrixStack::Rotate(float a,float x,float y,float z)
{	
	MatrixMathNamespace::rotate(Get(),a,x,y,z);
}

void MatrixStack::Translate(float x,float y,float z)
{
	float f[3]={x,y,z};
	MatrixMathNamespace::translate(Get(),f);
}

void MatrixStack::Scale(float x,float y,float z)
{
	MatrixMathNamespace::scale(Get(),Get(),x,y,z);
}

MatrixStack::matrixmode MatrixStack::GetMode()
{
	return (MatrixStack::matrixmode)mode;
}

void MatrixStack::SetMode(MatrixStack::matrixmode m)
{
	mode=m;
}

///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////

unsigned char TabContainer::rawUpArrow[]={0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xa7,0x0,0x0,0x0,0xa8,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x87,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0x88,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6a,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0x6b,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4b,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2b,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xfe,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xfe,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0x2c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x0,0x0,0x0,0xfa,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xfb,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0xdc,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xdc,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0xe7,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xe7,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
unsigned char TabContainer::rawRightArrow[]={0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe7,0x0,0x0,0x0,0xdc,0x0,0x0,0x0,0xb,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xfa,0x0,0x0,0x0,0x2b,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0x4b,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xfe,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0x6a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0x87,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xa7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xa8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0x88,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xfe,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0x6b,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0x4c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xfb,0x0,0x0,0x0,0x2c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe7,0x0,0x0,0x0,0xdc,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
unsigned char TabContainer::rawDownArrow[]={0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0xe7,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xef,0x0,0x0,0x0,0xe7,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0xdc,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xdc,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0xfb,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xfa,0x0,0x0,0x0,0xb,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xfe,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xfe,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0x2b,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4c,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0x4b,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6b,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0x6a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x88,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0x87,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xa8,0x0,0x0,0x0,0xa7,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
unsigned char TabContainer::rawFolder[]={0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe6,0xc1,0x9b,0x12,0xe9,0xc4,0x9f,0xd8,0xe9,0xc4,0xa0,0xff,0xe9,0xc4,0xa0,0xff,0xe9,0xc4,0xa0,0xff,0xe9,0xc4,0xa0,0xff,0xe9,0xc4,0xa0,0xff,0xe6,0xc0,0x9a,0x5b,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe5,0xc1,0x9e,0x20,0xe5,0xc2,0x9e,0xef,0xe5,0xc2,0x9e,0xff,0xe5,0xc2,0x9e,0xff,0xe5,0xc2,0x9d,0xff,0xe5,0xc2,0x9d,0xff,0xe5,0xc2,0x9d,0xff,0xe4,0xc2,0x9c,0xa6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe3,0xbe,0x98,0x21,0xdf,0xb9,0x94,0xee,0xdf,0xb9,0x93,0xff,0xdf,0xb9,0x93,0xff,0xde,0xb9,0x92,0xff,0xde,0xb9,0x93,0xff,0xde,0xb9,0x93,0xff,0xdd,0xb7,0x90,0xe4,0xda,0xb2,0x89,0xa2,0xda,0xb2,0x8a,0xa3,0xda,0xb2,0x8a,0xa3,0xda,0xb2,0x8a,0xa3,0xda,0xb2,0x8a,0x86,0xe6,0xc1,0x97,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfb,0xda,0xaf,0xd2,0xf7,0xd6,0xab,0xfd,0xf7,0xd6,0xab,0xff,0xf7,0xd6,0xab,0xff,0xf7,0xd6,0xab,0xff,0xf6,0xd6,0xab,0xff,0xf6,0xd6,0xab,0xff,0xf6,0xd6,0xab,0xff,0xf6,0xd5,0xab,0xff,0xf6,0xd5,0xab,0xff,0xf6,0xd5,0xab,0xff,0xf6,0xd5,0xab,0xff,0xf6,0xd5,0xab,0xff,0xfa,0xda,0xaf,0xd7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf7,0xd5,0xaa,0xff,0xf7,0xd5,0xaa,0xff,0xf7,0xd5,0xaa,0xff,0xf7,0xd5,0xaa,0xff,0xf7,0xd5,0xaa,0xff,0xf7,0xd5,0xaa,0xff,0xf7,0xd5,0xaa,0xff,0xf7,0xd5,0xaa,0xff,0xf7,0xd5,0xaa,0xff,0xf7,0xd5,0xaa,0xff,0xf7,0xd5,0xaa,0xff,0xf7,0xd5,0xaa,0xff,0xf7,0xd5,0xaa,0xff,0xf7,0xd5,0xaa,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf3,0xcf,0xa3,0xff,0xf3,0xcf,0xa3,0xff,0xf3,0xcf,0xa3,0xff,0xf3,0xcf,0xa3,0xff,0xf3,0xcf,0xa3,0xff,0xf3,0xcf,0xa3,0xff,0xf3,0xcf,0xa3,0xff,0xf3,0xcf,0xa3,0xff,0xf3,0xcf,0xa3,0xff,0xf3,0xcf,0xa3,0xff,0xf3,0xcf,0xa3,0xff,0xf3,0xcf,0xa3,0xff,0xf3,0xcf,0xa3,0xff,0xf3,0xcf,0xa3,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xee,0xc8,0x9b,0xff,0xee,0xc8,0x9b,0xff,0xee,0xc8,0x9b,0xff,0xee,0xc8,0x9b,0xff,0xee,0xc8,0x9b,0xff,0xee,0xc8,0x9b,0xff,0xee,0xc8,0x9b,0xff,0xee,0xc8,0x9b,0xff,0xee,0xc8,0x9b,0xff,0xee,0xc8,0x9b,0xff,0xee,0xc8,0x9b,0xff,0xee,0xc8,0x9b,0xff,0xee,0xc8,0x9b,0xff,0xee,0xc8,0x9b,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xea,0xc2,0x95,0xff,0xea,0xc2,0x95,0xff,0xea,0xc2,0x95,0xff,0xea,0xc2,0x95,0xff,0xea,0xc2,0x95,0xff,0xea,0xc2,0x95,0xff,0xea,0xc2,0x95,0xff,0xea,0xc2,0x95,0xff,0xea,0xc2,0x95,0xff,0xea,0xc2,0x95,0xff,0xea,0xc2,0x95,0xff,0xea,0xc2,0x95,0xff,0xea,0xc2,0x95,0xff,0xea,0xc2,0x95,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe5,0xbb,0x8e,0xff,0xe5,0xbb,0x8e,0xff,0xe5,0xbb,0x8e,0xff,0xe5,0xbb,0x8e,0xff,0xe5,0xbb,0x8e,0xff,0xe5,0xbb,0x8e,0xff,0xe5,0xbb,0x8e,0xff,0xe5,0xbb,0x8e,0xff,0xe5,0xbb,0x8e,0xff,0xe5,0xbb,0x8e,0xff,0xe5,0xbb,0x8e,0xff,0xe5,0xbb,0x8e,0xff,0xe5,0xbb,0x8e,0xff,0xe5,0xbb,0x8e,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe1,0xb6,0x87,0xff,0xe1,0xb6,0x87,0xff,0xe1,0xb6,0x87,0xff,0xe1,0xb6,0x87,0xff,0xe1,0xb6,0x87,0xff,0xe1,0xb6,0x87,0xff,0xe1,0xb6,0x87,0xff,0xe1,0xb6,0x87,0xff,0xe1,0xb6,0x87,0xff,0xe1,0xb6,0x87,0xff,0xe1,0xb6,0x87,0xff,0xe1,0xb6,0x87,0xff,0xe1,0xb6,0x87,0xff,0xe1,0xb6,0x87,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xdc,0xb0,0x7f,0xff,0xdc,0xb0,0x7f,0xff,0xdc,0xb0,0x7f,0xff,0xdc,0xb0,0x7f,0xff,0xdc,0xb0,0x7f,0xff,0xdc,0xb0,0x7f,0xff,0xdc,0xb0,0x7f,0xff,0xdc,0xb0,0x7f,0xff,0xdc,0xb0,0x7f,0xff,0xdc,0xb0,0x7f,0xff,0xdc,0xb0,0x7f,0xff,0xdc,0xb0,0x7f,0xff,0xdc,0xb0,0x7f,0xff,0xdc,0xb0,0x7f,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd8,0xa9,0x78,0xff,0xd8,0xa9,0x78,0xff,0xd8,0xa9,0x78,0xff,0xd8,0xa9,0x78,0xff,0xd8,0xa9,0x78,0xff,0xd8,0xa9,0x78,0xff,0xd8,0xa9,0x78,0xff,0xd8,0xa9,0x78,0xff,0xd8,0xa9,0x78,0xff,0xd8,0xa9,0x78,0xff,0xd8,0xa9,0x78,0xff,0xd8,0xa9,0x78,0xff,0xd8,0xa9,0x78,0xff,0xd8,0xa9,0x78,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd3,0xa3,0x71,0xff,0xd3,0xa3,0x71,0xff,0xd3,0xa3,0x71,0xff,0xd3,0xa3,0x71,0xff,0xd3,0xa3,0x71,0xff,0xd3,0xa3,0x71,0xff,0xd3,0xa3,0x71,0xff,0xd3,0xa3,0x71,0xff,0xd3,0xa3,0x71,0xff,0xd3,0xa3,0x71,0xff,0xd3,0xa3,0x71,0xff,0xd3,0xa3,0x71,0xff,0xd3,0xa3,0x71,0xff,0xd3,0xa3,0x71,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc9,0x96,0x64,0xe7,0xca,0x97,0x65,0xff,0xca,0x97,0x65,0xff,0xca,0x97,0x65,0xff,0xca,0x97,0x65,0xff,0xca,0x97,0x65,0xff,0xca,0x97,0x65,0xff,0xca,0x97,0x65,0xff,0xca,0x97,0x65,0xff,0xca,0x97,0x65,0xff,0xca,0x97,0x65,0xff,0xca,0x97,0x65,0xff,0xca,0x97,0x65,0xff,0xc9,0x97,0x64,0xf1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
unsigned char TabContainer::rawFile[]={0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc8,0xc8,0xc8,0x4c,0xe0,0xe0,0xe0,0xcd,0xe1,0xe1,0xe1,0xc0,0xe1,0xe1,0xe1,0xbf,0xe1,0xe1,0xe1,0xbf,0xe1,0xe1,0xe1,0xbf,0xe1,0xe1,0xe1,0xc0,0xd6,0xd6,0xd6,0xc4,0xbd,0xbd,0xbd,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc5,0xc5,0xc5,0x70,0xec,0xec,0xec,0xff,0xed,0xed,0xed,0xff,0xed,0xed,0xed,0xff,0xed,0xed,0xed,0xff,0xed,0xed,0xed,0xff,0xee,0xee,0xee,0xff,0xeb,0xeb,0xeb,0xff,0xce,0xce,0xce,0xff,0xbd,0xbd,0xbd,0xa6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbe,0xbe,0xbe,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc5,0xc5,0xc5,0x6c,0xec,0xec,0xec,0xff,0xed,0xed,0xed,0xff,0xed,0xed,0xed,0xff,0xed,0xed,0xed,0xff,0xed,0xed,0xed,0xff,0xed,0xed,0xed,0xff,0xef,0xef,0xef,0xff,0xd3,0xd3,0xd3,0xfd,0xe1,0xe1,0xe1,0xff,0xde,0xde,0xde,0xae,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc8,0xc8,0xc8,0x6c,0xee,0xee,0xee,0xff,0xef,0xef,0xef,0xff,0xef,0xef,0xef,0xff,0xef,0xef,0xef,0xff,0xef,0xef,0xef,0xff,0xef,0xef,0xef,0xff,0xf0,0xf0,0xf0,0xff,0xdb,0xdb,0xdb,0xff,0xc0,0xc0,0xc0,0xfe,0xc9,0xc9,0xc9,0xff,0xb9,0xb9,0xb9,0xbd,0x0,0x0,0x0,0x0,0xff,0xff,0xff,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc9,0xc9,0xc9,0x6b,0xf0,0xf0,0xf0,0xff,0xf1,0xf1,0xf1,0xff,0xf1,0xf1,0xf1,0xff,0xf1,0xf1,0xf1,0xff,0xf1,0xf1,0xf1,0xff,0xf1,0xf1,0xf1,0xff,0xf1,0xf1,0xf1,0xff,0xe7,0xe7,0xe7,0xff,0xc3,0xc3,0xc3,0xff,0xb6,0xb6,0xb6,0xfc,0xc2,0xc2,0xc2,0xff,0xbd,0xbd,0xbd,0x95,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xcb,0xcb,0xcb,0x6b,0xf2,0xf2,0xf2,0xff,0xf3,0xf3,0xf3,0xff,0xf3,0xf3,0xf3,0xff,0xf3,0xf3,0xf3,0xff,0xf3,0xf3,0xf3,0xff,0xf3,0xf3,0xf3,0xff,0xf3,0xf3,0xf3,0xff,0xf2,0xf2,0xf2,0xff,0xf2,0xf2,0xf2,0xff,0xf4,0xf4,0xf4,0xff,0xf2,0xf2,0xf2,0xff,0xd5,0xd5,0xd5,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xcd,0xcd,0xcd,0x6b,0xf4,0xf4,0xf4,0xff,0xf5,0xf5,0xf5,0xff,0xf5,0xf5,0xf5,0xff,0xf5,0xf5,0xf5,0xff,0xf5,0xf5,0xf5,0xff,0xf5,0xf5,0xf5,0xff,0xf5,0xf5,0xf5,0xff,0xf5,0xf5,0xf5,0xff,0xf6,0xf6,0xf6,0xff,0xf6,0xf6,0xf6,0xff,0xf8,0xf8,0xf8,0xff,0xe4,0xe4,0xe4,0xbc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xcf,0xcf,0xcf,0x6b,0xf6,0xf6,0xf6,0xff,0xf7,0xf7,0xf7,0xff,0xf7,0xf7,0xf7,0xff,0xf7,0xf7,0xf7,0xff,0xf7,0xf7,0xf7,0xff,0xf7,0xf7,0xf7,0xff,0xf7,0xf7,0xf7,0xff,0xf7,0xf7,0xf7,0xff,0xf7,0xf7,0xf7,0xff,0xf7,0xf7,0xf7,0xff,0xf9,0xf9,0xf9,0xff,0xe5,0xe5,0xe5,0xbc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd0,0xd0,0xd0,0x6b,0xf8,0xf8,0xf8,0xff,0xf9,0xf9,0xf9,0xff,0xf9,0xf9,0xf9,0xff,0xf9,0xf9,0xf9,0xff,0xf9,0xf9,0xf9,0xff,0xf9,0xf9,0xf9,0xff,0xf9,0xf9,0xf9,0xff,0xf9,0xf9,0xf9,0xff,0xf9,0xf9,0xf9,0xff,0xf9,0xf9,0xf9,0xff,0xfb,0xfb,0xfb,0xff,0xe8,0xe8,0xe8,0xbc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd2,0xd2,0xd2,0x6b,0xf9,0xf9,0xf9,0xff,0xfa,0xfa,0xfa,0xff,0xfa,0xfa,0xfa,0xff,0xfa,0xfa,0xfa,0xff,0xfa,0xfa,0xfa,0xff,0xfa,0xfa,0xfa,0xff,0xfa,0xfa,0xfa,0xff,0xfa,0xfa,0xfa,0xff,0xfa,0xfa,0xfa,0xff,0xfa,0xfa,0xfa,0xff,0xfc,0xfc,0xfc,0xff,0xe9,0xe9,0xe9,0xbb,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd3,0xd3,0xd3,0x6b,0xfb,0xfb,0xfb,0xff,0xfc,0xfc,0xfc,0xff,0xfc,0xfc,0xfc,0xff,0xfc,0xfc,0xfc,0xff,0xfc,0xfc,0xfc,0xff,0xfc,0xfc,0xfc,0xff,0xfc,0xfc,0xfc,0xff,0xfc,0xfc,0xfc,0xff,0xfc,0xfc,0xfc,0xff,0xfc,0xfc,0xfc,0xff,0xfe,0xfe,0xfe,0xff,0xeb,0xeb,0xeb,0xbb,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd4,0xd4,0xd4,0x6b,0xfc,0xfc,0xfc,0xff,0xfd,0xfd,0xfd,0xff,0xfd,0xfd,0xfd,0xff,0xfd,0xfd,0xfd,0xff,0xfd,0xfd,0xfd,0xff,0xfd,0xfd,0xfd,0xff,0xfd,0xfd,0xfd,0xff,0xfd,0xfd,0xfd,0xff,0xfd,0xfd,0xfd,0xff,0xfd,0xfd,0xfd,0xff,0xff,0xff,0xff,0xff,0xec,0xec,0xec,0xbb,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd4,0xd4,0xd4,0x6b,0xfd,0xfd,0xfd,0xff,0xfe,0xfe,0xfe,0xff,0xfe,0xfe,0xfe,0xff,0xfe,0xfe,0xfe,0xff,0xfe,0xfe,0xfe,0xff,0xfe,0xfe,0xfe,0xff,0xfe,0xfe,0xfe,0xff,0xfe,0xfe,0xfe,0xff,0xfe,0xfe,0xfe,0xff,0xfe,0xfe,0xfe,0xff,0xff,0xff,0xff,0xff,0xec,0xec,0xec,0xbb,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd5,0xd5,0xd5,0x6a,0xfd,0xfd,0xfd,0xff,0xfe,0xfe,0xfe,0xff,0xfe,0xfe,0xfe,0xff,0xfe,0xfe,0xfe,0xff,0xfe,0xfe,0xfe,0xff,0xfe,0xfe,0xfe,0xff,0xfe,0xfe,0xfe,0xff,0xfe,0xfe,0xfe,0xff,0xfe,0xfe,0xfe,0xff,0xfe,0xfe,0xfe,0xff,0xff,0xff,0xff,0xff,0xed,0xed,0xed,0xbb,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xdb,0xdb,0xdb,0x70,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf1,0xf1,0xf1,0xc5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa4,0xa4,0xa4,0x41,0xbc,0xbc,0xbc,0xab,0xbb,0xbb,0xbb,0xa2,0xbb,0xbb,0xbb,0xa1,0xbb,0xbb,0xbb,0xa1,0xbb,0xbb,0xbb,0xa1,0xbb,0xbb,0xbb,0xa1,0xbb,0xbb,0xbb,0xa1,0xbb,0xbb,0xbb,0xa1,0xbb,0xbb,0xbb,0xa2,0xbb,0xbb,0xbb,0xa2,0xbd,0xbd,0xbd,0xaa,0xb4,0xb4,0xb4,0x73,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};

TabContainer::TabContainer(float x,float y,float w,float h):
tabs(this),
	windowData(0),
	editorWindowContainer(0),
	selected(0),
	mouseDown(false),
	isRender(false),
	splitterContainer(0),
	renderer3D(0),
	renderer2D(0),
	recreateTarget(true),
	resizeTarget(true),
	lastFrameTime(0),
	iconUp(0),
	iconRight(0),
	iconDown(0),
	iconFolder(0),
	iconFile(0),
	thread(0)
{}

TabContainer::~TabContainer()
{
	printf("deleting TabContainer %p\n",this);
}

GuiRect* TabContainer::GetSelected()
{
	return selected<tabs.childs.size() ? tabs.childs[selected] : 0;
}

void TabContainer::Draw()
{
	if(!this->drawInstances.empty())
	{
		DrawInstance*& tDrawInstance=this->drawInstances.front();

		if(tDrawInstance->code || tDrawInstance->frame)
		{
			if(this->BeginDraw())
			{
				if(tDrawInstance->frame)
					this->DrawFrame();

				switch(tDrawInstance->code)
				{
				case 1:this->OnGuiPaint();break;
				case 2:tDrawInstance->rect->OnPaint(this);break;
				}

				this->EndDraw();
			}
		}

		if(tDrawInstance->remove)
		{
			SAFEDELETE(tDrawInstance);
			this->drawInstances.pop_front();
		}
	}
	else
	{
		if(Timer::instance->GetTime()-this->lastFrameTime>(1000.0f/Timer::instance->renderFps))
		{
			this->lastFrameTime=Timer::instance->GetTime();
			this->renderer3D->Render();
		}
	}
}

DrawInstance* TabContainer::SetDraw(int iCode,bool iFrame,GuiRect* iRect,bool iRemove)
{
	DrawInstance* newInstance=new DrawInstance(iCode,iFrame,iRect,iRemove);
	this->drawInstances.push_back(newInstance);
	return newInstance;
}

void TabContainer::BroadcastToSelected(void (GuiRect::*func)(TabContainer*,void*),void* data)
{
	GuiRect* selectedTab=this->GetSelected();

	if(selectedTab)
		(selectedTab->*func)(this,data);
}

void TabContainer::BroadcastToAll(void (GuiRect::*func)(TabContainer*,void*),void* data)
{
	(this->tabs.*func)(this,data);
}


template<class C> void TabContainer::BroadcastToSelected(void (GuiRect::*func)(TabContainer*,void*),void* data)
{
	GuiRect* selectedTab=this->GetSelected();

	if(selectedTab)
		selectedTab->BroadcastTo<C>(func,data);
}

template<class C> void TabContainer::BroadcastToAll(void (GuiRect::*func)(TabContainer*,void*),void* data)
{
	this->tabs.BroadcastTo<C>(func,data);
}


void TabContainer::SetSelection(GuiRect* iRect)
{
	this->BroadcastToSelected(&GuiRect::OnDeactivate);

	for(size_t i=0;i<this->tabs.childs.size();i++)
	{
		if(iRect==this->tabs.childs[i])
		{
			this->selected=i;
			break;
		}
	}

	this->BroadcastToSelected(&GuiRect::OnActivate);
	this->BroadcastToSelected(&GuiRect::OnSize);
}


void TabContainer::OnGuiSize(void* data)
{
	this->windowData->OnSize();

	this->tabs.rect.make(0.0f,(float)TabContainer::CONTAINER_HEIGHT,this->windowData->width,this->windowData->height-TabContainer::CONTAINER_HEIGHT);

	this->BroadcastToSelected(&GuiRect::OnSize,data);

	this->resizeTarget=true;
	//this->OnGuiPaint();

}

void TabContainer::OnWindowPosChanging(void* data)
{
	this->windowData->OnWindowPosChanging();

	this->tabs.rect.make(0,TabContainer::CONTAINER_HEIGHT,this->windowData->width,this->windowData->height-TabContainer::CONTAINER_HEIGHT);

	this->BroadcastToSelected(&GuiRect::OnSize,data);
	this->resizeTarget=true;
}

void TabContainer::OnGuiMouseMove(void* data)
{
	splitterContainer->currentTabContainer=this;

	/*if(mouseDown && tmx!=mousex && tmy!=mousey)
		splitterContainer->CreateFloatingTab(this);

	mousex=tmx;
	mousey=tmy;*/

	//if(mousey>TabContainer::CONTAINER_HEIGHT)
	this->BroadcastToSelected(&GuiRect::OnMouseMove,vec2(this->mousex,this->mousey));
}

void TabContainer::OnGuiLMouseUp(void* data)
{
	mouseDown=false;

	this->BroadcastToSelected(&GuiRect::OnLMouseUp,vec2(this->mousex,this->mousey));
}

void TabContainer::OnGuiMouseWheel(void* data)
{

}

void TabContainer::OnGuiLMouseDown(void* data)
{
	//this->OnGuiMouseMove();

	float &x=this->mousex;
	float &y=this->mousey;


	if(y<=CONTAINER_HEIGHT)
	{
		int prevSel=selected;

		for(int i=0;i<(int)tabs.childs.size();i++)
		{
			if(x>(i*TAB_WIDTH) && x< (i*TAB_WIDTH+TAB_WIDTH) && y > (CONTAINER_HEIGHT-TAB_HEIGHT) &&  y<CONTAINER_HEIGHT)
			{
				
				mouseDown=true;

				this->SetSelection(tabs.childs[i]);

				this->SetDraw(1,true);

				break;
			}
		}
	}
	else
	{
		this->BroadcastToSelected(&GuiRect::OnLMouseDown,vec2(this->mousex,this->mousey));
	}
}

void TabContainer::OnGuiUpdate(void* data)
{
	this->BroadcastToSelected(&GuiRect::OnUpdate,data);
}

void TabContainer::OnGuiRMouseUp(void* data)
{
	this->BroadcastToSelected(&GuiRect::OnRMouseUp,data);
}

void TabContainer::OnGuiRender(void* data)
{
	this->BroadcastToSelected(&GuiRect::OnRender,data);
}

void TabContainer::DrawFrame()
{

}

void TabContainer::OnGuiPaint(void* data)
{

}

void TabContainer::OnResizeContainer(void* data)
{

}

void TabContainer::OnEntitiesChange(void* data)
{
	this->BroadcastToSelected(&GuiRect::OnEntitiesChange,data);
}
void TabContainer::OnGuiActivate(void* data)
{
	this->BroadcastToSelected(&GuiRect::OnActivate,data);


}
void TabContainer::OnGuiDeactivate(void* data)
{
	this->BroadcastToSelected(&GuiRect::OnDeactivate,data);
}
void TabContainer::OnGuiEntitySelected(void* data)
{
	this->BroadcastToSelected(&GuiRect::OnEntitySelected,data);
}

void TabContainer::OnGuiKeyDown(void* data)
{
	this->BroadcastToSelected(&GuiRect::OnKeyDown,data);
}

void TabContainer::OnGuiKeyUp(void* data)
{
	this->BroadcastToSelected(&GuiRect::OnKeyUp,data);
}

void TabContainer::OnGuiRecreateTarget(void* data)
{
	this->BroadcastToSelected(&GuiRect::OnRecreateTarget,data);
}


///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
SplitterContainer::SplitterContainer():
splitterSize(4)
{
	floatingTabRef=0;
	floatingTab=0;
	floatingTabTarget=0;
	floatingTabRefTabIdx=-1;
	floatingTabRefTabCount=-1;
	floatingTabTargetAnchorPos=-1;
	floatingTabTargetAnchorTabIndex=-1;

	splitterCursor="IDC_ARROW";
}
SplitterContainer::~SplitterContainer()
{
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////

///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////

///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////

///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////





///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////

Renderer3DInterface::Renderer3DInterface(TabContainer* iTabContainer):
	tabContainer(iTabContainer),
	rendererTask(0),
	unlit(0),
	unlit_color(0),
	unlit_texture(0),
	font(0),
	shaded_texture(0),
	picking(false)
{

}


void Renderer3DInterface::Register(GuiViewport* iViewport)
{
	if(this->viewports.end()==std::find(this->viewports.begin(),this->viewports.end(),iViewport))
		this->viewports.push_back(iViewport);
}
void Renderer3DInterface::Unregister(GuiViewport* iViewport)
{
	this->viewports.remove(iViewport);
}

ShaderInterface* Renderer3DInterface::FindShader(const char* name,bool exact)
{
	for(size_t i=0;i<this->shaders.size();i++)
	{
		ShaderInterface* element=this->shaders[i];

		const char* programName=element->GetName();

		if(element && programName)
			if(exact ? 0==strcmp(programName,name) :  0!=strstr(programName,name))
				return this->shaders[i];
	}

	return 0;
}

void Renderer3DInterface::SetMatrices(const float* view,const float* mdl)
{
	for(size_t i=0;i<this->shaders.size();i++)
	{
		this->shaders[i]->Use();

		if(view)
			this->shaders[i]->SetProjectionMatrix((float*)view);
		if(mdl)
			this->shaders[i]->SetModelviewMatrix((float*)mdl);
	}
}

////////////////////////////
////////GuiRect///////
////////////////////////////

GuiRect::GuiRect(GuiRect* iParent,float ix, float iy, float iw,float ih,vec2 _alignPos,vec2 _alignRect):
	colorBackground(Renderer2DInterface::COLOR_GUI_BACKGROUND),
	colorForeground(Renderer2DInterface::COLOR_TEXT),
	colorHovering(colorBackground),
	colorPressing(colorBackground),
	colorChecked(colorBackground),
	pressing(false),
	hovering(false),
	checked(false),
	active(false),
	clip(0)
{
	this->Set(iParent,0,0,-1,ix,iy,iw,ih,_alignPos.x,_alignPos.y,_alignRect.x,_alignRect.y);

	for(size_t i=0;i<4;i++)
		this->sibling[i]=0;
}

GuiRect::~GuiRect()
{
	
}

void GuiRect::SetParent(GuiRect* iParent)
{
	GuiRect* oldParent=this->parent;
	this->parent=iParent;

	if(oldParent)
		oldParent->childs.erase(std::find(oldParent->childs.begin(),oldParent->childs.end(),this));

	if(this->parent)
	{
		this->parent->childs.push_back(this);

		if(this->parent->clip)
			this->SetClip(this->parent->clip);
	}

	this->active=iParent ? iParent->active : 0;
}

void GuiRect::Set(GuiRect* iParent,GuiRect* iSibling,int iSiblingIdx,int iContainer,float iX, float iY, float iW,float iH,float iAlignPosX,float iAlignPosY,float iAlignRectX,float iAlignRectY)
{
	this->sibling[iSiblingIdx]=iSibling;
	this->container=iContainer;
	this->rect.make(iX,iY,iW,iH);
	this->alignPos.make(iAlignPosX,iAlignPosY);
	this->alignRect.make(iAlignRectX,iAlignRectY);
	this->SetParent(iParent);
}

bool GuiRect::_contains(vec4& quad,vec2 point)
{
	return (point.x>quad.x && point.x<(quad.x+quad.z) && point.y>quad.y && point.y<(quad.y+quad.w));
}
	
void GuiRect::BroadcastToChilds(void (GuiRect::*func)(TabContainer*,void*),TabContainer* tabContainer,void* data)
{
	for_each(this->childs.begin(),this->childs.end(),std::bind(func,std::placeholders::_1,tabContainer,data));
}

void GuiRect::BroadcastToRoot(void (GuiRect::*func)(TabContainer*,void*),void* data)
{
	GuiRootRect* root=dynamic_cast<GuiRootRect*>(this->GetRoot());

	if(root)
		(root->*func)(root->tabContainer,data);
}




void GuiRect::OnEntitiesChange(TabContainer* tabContainer,void* data)
{
	this->BroadcastToChilds(&GuiRect::OnEntitiesChange,tabContainer,data);
}

void GuiRect::DrawBackground(TabContainer* tabContainer)
{
	unsigned int tCurrentColor=this->pressing ? this->colorPressing : (this->hovering ? this->colorHovering : this->colorBackground);

	tabContainer->renderer2D->DrawRectangle(this->rect.x,this->rect.y,this->rect.x+this->rect.z,this->rect.y+this->rect.w,tCurrentColor);
}


void GuiRect::OnPaint(TabContainer* tabContainer,void* data)
{
	bool selfClip=this->SelfClipBegin(tabContainer);

	this->DrawBackground(tabContainer);

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnPaint,tabContainer,data);

	this->SelfClipEnd(tabContainer,selfClip);
}


void GuiRect::OnSize(TabContainer* tabContainer,void* data)
{
	if(parent)
	{
		vec4 &pRect=this->parent->rect;

		this->rect.z = this->alignRect.x>=0 ? this->alignRect.x * pRect.z : this->rect.z;
		this->rect.w = this->alignRect.y>=0 ? this->alignRect.y * pRect.w : this->rect.w;

		if(this->alignPos.x>=0)
			this->rect.x=pRect.x+this->alignPos.x*pRect.z;
		if(this->alignPos.y>=0)
			this->rect.y=pRect.y+this->alignPos.y*pRect.w;

		if(parent->container>=0)
		{
			this->rect.x+=20;
			this->rect.z-=20;
		}

		this->rect.x = pRect.x > this->rect.x ? pRect.x : (pRect.x+pRect.z < this->rect.x+this->rect.z ? this->rect.x - (this->rect.x+this->rect.z - (pRect.x+pRect.z)) : this->rect.x);
		this->rect.y = pRect.y > this->rect.y ? pRect.y : (pRect.y+pRect.w < this->rect.y+this->rect.w ? this->rect.y - (this->rect.y+this->rect.w - (pRect.y+pRect.w)) : this->rect.y);

		if(parent->container>=0)
		{
			this->rect.y+=20;
		}
	}
		

	if(sibling[0])
	{
		this->rect.x=this->sibling[0]->rect.x+this->sibling[0]->rect.z;
	}
	else if(this->sibling[1])
	{
		this->rect.y=this->sibling[1]->rect.y+this->sibling[1]->rect.w;
	}
	else if(sibling[2])
	{
		this->rect.x=this->sibling[2]->rect.x-this->rect.z;
	}
	else if(sibling[3])
	{
		this->rect.y=this->sibling[3]->rect.y-this->rect.w;
	}

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnSize,tabContainer,data);



	if(container==0)
	{
		this->rect.w=20;
	}
	else if(container==1)
		this->rect.w=20;//calc on childs



	if(this->container==1 && !this->childs.empty())
	{
		GuiRect* te=this->childs.back();

		this->rect.w=te->rect.y+te->rect.w-this->rect.y;
	}
}

void GuiRect::OnLMouseDown(TabContainer* tabContainer,void* data)
{
	vec2& mpos=*(vec2*)data;

	bool wasPressing=this->pressing;
	bool bContainerButtonPressed=0;

	this->pressing=this->hovering;

	if(this->hovering)
	{
		this->checked=!this->checked;


		if(this->container>=0)
		{
			bContainerButtonPressed=(mpos.x > this->rect.x && mpos.x < this->rect.x+TabContainer::CONTAINER_ICON_WH && mpos.y > this->rect.y && mpos.y <this->rect.y+TabContainer::CONTAINER_ICON_WH);

			if(bContainerButtonPressed)
				this->container=!this->container;
		}

		if(bContainerButtonPressed)
		{
			tabContainer->BroadcastToSelected(&GuiRect::OnSize);
			this->OnExpandos(tabContainer,this);
			tabContainer->SetDraw(1,false);
		}

		if(wasPressing!=this->pressing && this->colorPressing!=this->colorBackground)
			tabContainer->SetDraw(2,0,this);
		
		return;
	}
	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnLMouseDown,tabContainer,data);

	if(wasPressing!=this->pressing && this->colorPressing!=this->colorBackground)
		tabContainer->SetDraw(2,0,this);
}
void GuiRect::OnLMouseUp(TabContainer* tabContainer,void* data)
{
	bool wasPressing=this->pressing;

	this->pressing = false;

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnLMouseUp,tabContainer,data);

	if(wasPressing!=this->pressing && this->colorPressing!=this->colorBackground)
		tabContainer->SetDraw(2,0,this);
}

void GuiRect::OnRMouseUp(TabContainer* tabContainer,void* data)
{
	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnRMouseUp,tabContainer,data);
}


void GuiRect::OnMouseMove(TabContainer* tabContainer,void* data)
{
	vec2& mpos=*(vec2*)data;

	bool _oldHover=this->hovering;
	bool _curHover=_contains(this->rect,vec2(mpos.x,mpos.y));

	if(parent && _curHover)
		parent->hovering=false;
	
	this->hovering=_curHover;

	if(/*_curHover && */this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnMouseMove,tabContainer,data);

	if(_oldHover!=this->hovering && this->colorBackground!=this->colorHovering)
		tabContainer->SetDraw(2,0,this);
}

void GuiRect::OnUpdate(TabContainer* tabContainer,void* data)
{
	this->BroadcastToChilds(&GuiRect::OnUpdate,tabContainer,data);
}

void GuiRect::OnReparent(TabContainer* tabContainer,void* data)
{
	this->BroadcastToChilds(&GuiRect::OnReparent,tabContainer,data);
}
void GuiRect::OnSelected(TabContainer* tabContainer,void* data)
{
	this->BroadcastToChilds(&GuiRect::OnSelected,tabContainer,data);
}
void GuiRect::OnRender(TabContainer* tabContainer,void* data)
{
	this->BroadcastToChilds(&GuiRect::OnRender,tabContainer);
}
void GuiRect::OnMouseWheel(TabContainer* tabContainer,void* data)
{
	this->BroadcastToChilds(&GuiRect::OnMouseWheel,tabContainer,data);
}
void GuiRect::OnActivate(TabContainer* tabContainer,void* data)
{
	/*if(this->active)
		__debugbreak();*/
	this->active=true;
	this->BroadcastToChilds(&GuiRect::OnActivate,tabContainer);
}
void GuiRect::OnDeactivate(TabContainer* tabContainer,void* data)
{
	/*if(!active)
		__debugbreak();*/
	this->active=false;
	this->BroadcastToChilds(&GuiRect::OnDeactivate,tabContainer,data);
}
void GuiRect::OnEntitySelected(TabContainer* tabContainer,void* data)
{
	this->BroadcastToChilds(&GuiRect::OnEntitySelected,tabContainer,data);
}

void GuiRect::OnExpandos(TabContainer* tabContainer,void* data)
{
	if(this->parent)
		this->parent->OnExpandos(tabContainer,data);
}

void GuiRect::OnKeyDown(TabContainer* tabContainer,void* data)
{
	this->BroadcastToChilds(&GuiRect::OnKeyDown,tabContainer,data);
}

void GuiRect::OnKeyUp(TabContainer* tabContainer,void* data)
{
	this->BroadcastToChilds(&GuiRect::OnKeyDown,tabContainer,data);
}

void GuiRect::OnMouseEnter(TabContainer* tabContainer,void* data)
{
	this->BroadcastToChilds(&GuiRect::OnMouseEnter,tabContainer,data);
}
void GuiRect::OnMouseExit(TabContainer* tabContainer,void* data)
{
	this->BroadcastToChilds(&GuiRect::OnMouseExit,tabContainer,data);
}

void GuiRect::SetClip(GuiScrollRect* scrollRect)
{
	this->clip=scrollRect;

	for_each(this->childs.begin(),this->childs.end(),std::bind(&GuiRect::SetClip,std::placeholders::_1,scrollRect));
}



void GuiRect::SelfRenderEnd(TabContainer* tabContainer,bool& isSelfRender)
{
	if(isSelfRender)
		tabContainer->EndDraw();
}

bool GuiRect::SelfClipBegin(TabContainer* tabContainer)
{
	bool clipped=false;

	if(this->clip && !this->clip->isClipped)
	{
		tabContainer->renderer2D->PushScissor(this->clip->rect.x,this->clip->rect.y,this->clip->rect.x+this->clip->width,this->clip->rect.y+this->clip->rect.w);
		tabContainer->renderer2D->Translate(0,-this->clip->scrollBar->scrollerPosition*this->clip->contentHeight);

		clipped=this->clip->isClipped=true;
	}
		
	return clipped;
}

void GuiRect::SelfClipEnd(TabContainer* tabContainer,bool& isSelfClip)
{
	if(isSelfClip)
	{
		tabContainer->renderer2D->Identity();
		tabContainer->renderer2D->PopScissor();
		this->clip->isClipped=false;
	}
}



GuiRect* GuiRect::GetRoot()
{
	return this->parent ? this->parent->GetRoot() : this;
}

GuiRootRect* GuiRect::GetRootRect()
{
	return (GuiRootRect*)this->GetRoot();
}


GuiRect* GuiRect::Rect(float ix, float iy, float iw,float ih,float apx, float apy, float arx,float ary)
{
	return new GuiRect(this,ix,iy,iw,ih,vec2(apx,apy),vec2(arx,ary));
}


GuiString* GuiRect::Text(String str,float ix, float iy, float iw,float ih,vec2 _alignText)
{
	GuiString* label=new GuiString;
	label->parent=this;
	label->rect.make(ix,iy,iw,ih);
	label->alignText=_alignText;
	label->text=str;
	this->childs.push_back(label);
	return label;
}

GuiString* GuiRect::Text(String str,vec2 _alignPos,vec2 _alignRect,vec2 _alignText)
{
	GuiString* label=new GuiString;
	label->parent=this;
	label->alignPos=_alignPos;
	label->alignRect=_alignRect;
	label->alignText=_alignText;
	label->text=str;
	this->childs.push_back(label);
	return label;
}


GuiString* GuiRect::Container(const char* iText)
{
	GuiString* s=new GuiString;
	s->name="GuiContainer";
	s->Set(this,((int)this->childs.size()) ? this->childs.back() : 0,1,0,0,0,0,20,0,0,1,-1);
	s->text=iText;
	s->alignText.make(1,-1);

	return s;
}


GuiPropertyString* GuiRect::Property(const char* iProp,String& iVal)
{
	GuiPropertyString* p=new GuiPropertyString(iVal);
	p->description=iProp;
	this->AppendChild(p);
	return p;
}

GuiPropertyVec3* GuiRect::Property(const char* iProp,vec3& iRVal)
{
	GuiPropertyVec3* v=new GuiPropertyVec3(iRVal);
	v->description=iProp;
	this->AppendChild(v);
	return v;
	
}

GuiPropertyPtr* GuiRect::Property(const char* iProp,void* iRVal)
{
	GuiPropertyPtr* v=new GuiPropertyPtr(iRVal);
	v->description=iProp;
	this->AppendChild(v);
	return v;
}

GuiPropertyFloat* GuiRect::Property(const char* iProp,float& iRVal)
{
	GuiPropertyFloat* v=new GuiPropertyFloat(iRVal);
	v->description=iProp;
	this->AppendChild(v);
	return v;

}

GuiPropertyBool* GuiRect::Property(const char* iProp,bool& iRVal)
{
	GuiPropertyBool* v=new GuiPropertyBool(iRVal);
	v->description=iProp;
	this->AppendChild(v);
	return v;
}


GuiPropertySlider* GuiRect::Property(const char* iLeft,float& ref,float& imin,float& imax)
{
	GuiPropertySlider* s=new GuiPropertySlider(ref,imin,imax);
	s->description=iLeft;
	this->AppendChild(s);
	return s;
}


GuiPropertyAnimationController* GuiRect::Property(AnimationController& ac)
{
	GuiPropertyAnimationController* a=new GuiPropertyAnimationController(ac);
	this->AppendChild(a);
	return a;
}

GuiViewport* GuiRect::Viewport(vec3 pos,vec3 target,vec3 up,bool perspective)
{
	GuiViewport* v=new GuiViewport;
	v->Set(this,0,0,-1,0,0,0,0,0,0,1,1);
	v->projection= !perspective ? v->projection : v->projection.perspective(90,16/9,1,1000);
	v->view.move(pos);
	v->view.lookat(target,up);
	return v;
}

GuiSceneViewer* GuiRect::SceneViewer()
{
	GuiSceneViewer* sv=new GuiSceneViewer;
	sv->Set(this,0,0,-1,0,0,0,0,0,0,1,1);
	return sv;
}

GuiEntityViewer* GuiRect::EntityViewer()
{
	GuiEntityViewer* sv=new GuiEntityViewer;
	sv->Set(this,0,0,-1,0,0,0,0,0,0,1,1);
	return sv;
}
GuiProjectViewer* GuiRect::ProjectViewer()
{
	GuiProjectViewer* sv=new GuiProjectViewer;
	sv->Set(this,0,0,-1,0,0,0,0,0,0,1,1);
	return sv;
}

GuiScriptViewer* GuiRect::ScriptViewer()
{
	GuiScriptViewer* sv=new GuiScriptViewer();
	sv->Set(this,0,0,-1,0,0,0,0,0,0,1,1);
	return sv;
}

GuiCompilerViewer* GuiRect::CompilerViewer()
{
	GuiCompilerViewer* sv=new GuiCompilerViewer();
	sv->Set(this,0,0,-1,0,0,0,0,0,0,1,1);
	return sv;
}

void GuiRect::AppendChild(GuiRect* iRect)
{
	iRect->sibling[1]=!this->childs.empty() ? this->childs.back() : 0;
	iRect->SetParent(this);
}

void GuiRect::DestroyChilds()
{
	for(size_t i=0;i<this->childs.size();i++)
	{
		this->childs[i]->DestroyChilds();
		SAFEDELETE(this->childs[i]);
	}

	this->childs.clear();
}

template<class GuiRectDerived> GuiRectDerived* GuiRect::Create(int sibIdx,int container,float ix, float iy, float iw,float ih,float iAlignPosX,float iAlignPosY,float iAlignRectX,float iAlignRectY)
{
	GuiRectDerived* guirectderived=new GuiRectDerived;

	if(!guirectderived)
		__debugbreak();

	guirectderived->Set(this,sibling,sibIdx,container,ix,iy,iw,ih,iAlignPosX,iAlignPosY,iAlignRectX,iAlignRectY);

	return guirectderived;
}

////////////////////////////
////////EditorEntity///////
////////////////////////////

EditorProperties::EditorProperties()
{
	this->properties.name="EditorProperties";
	this->properties.Set(0,0,0,0,0,0,0,20,0,0,1,-1);
}


EditorEntity::EditorEntity():
	selected(false),
	expanded(false),
	level(0)
{
	this->properties.Set(0,0,0,-1,0,0,0,0,0,0,1,1);
}

void EditorEntity::SetParent(Entity* iParent)
{
	Entity::SetParent(iParent);

	this->SetLevel(this);
}

void EditorEntity::SetLevel(EditorEntity* iEntity)
{
	EditorEntity* eeParent=(EditorEntity*)iEntity->parent;

	iEntity->level=eeParent ? eeParent->level+1 : iEntity->level;
	iEntity->expanded=!iEntity->level ? true : false;

	for(std::list<Entity*>::iterator i=iEntity->childs.begin();i!=iEntity->childs.end();i++)
		((EditorEntity*)*i)->SetLevel((EditorEntity*)*i);

	//for_each(eeChilds.begin(),eeChilds.end(),std::mem_fun(&EditorEntity::SetLevel));
}





////////////////////////////
////////GuiRect///////
////////////////////////////

void GuiRootRect::OnSize(TabContainer* tab)
{
	this->rect.make(0,TabContainer::CONTAINER_HEIGHT,tabContainer->windowData->width,tabContainer->windowData->height-TabContainer::CONTAINER_HEIGHT);

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnSize,tab);
}

////////////////////////////
////////GuiRect///////
////////////////////////////

void GuiString::OnPaint(TabContainer* tabContainer,void* data)
{
	bool selfClip=this->SelfClipBegin(tabContainer);

	this->DrawBackground(tabContainer);

	if(this->text.Buf() || this->wText.c_str())
	{
		if(this->container>=0)
		{
			this->container==1 ? 
			tabContainer->renderer2D->DrawBitmap(tabContainer->iconDown,this->rect.x,this->rect.y,this->rect.x+TabContainer::CONTAINER_ICON_WH,this->rect.y+TabContainer::CONTAINER_ICON_WH) 
			: tabContainer->renderer2D->DrawBitmap(tabContainer->iconRight,rect.x,this->rect.y,this->rect.x+TabContainer::CONTAINER_ICON_WH,this->rect.y+TabContainer::CONTAINER_ICON_WH);
			
			if(this->text.Buf())
			tabContainer->renderer2D->DrawText(this->text.Buf(),
												this->container>=0 ? this->rect.x+TREEVIEW_ROW_ADVANCE : this->rect.x,
												this->rect.y,
												this->rect.x+this->rect.z,
												this->rect.y+TabContainer::CONTAINER_ICON_WH,
												Renderer2DInterface::COLOR_TEXT,
												-1,0.5);
			if(this->wText.c_str())
			tabContainer->renderer2D->DrawText(this->wText.c_str(),
				this->container>=0 ? this->rect.x+TREEVIEW_ROW_ADVANCE : this->rect.x,
				this->rect.y,
				this->rect.x+this->rect.z,
				this->rect.y+TabContainer::CONTAINER_ICON_WH,
				Renderer2DInterface::COLOR_TEXT,
				-1,0.5);
		}
		else
		{
			if(this->text.Buf())
			tabContainer->renderer2D->DrawText(this->text.Buf(),
												this->rect.x,
												this->rect.y,
												this->rect.x+this->rect.z,
												this->rect.y+this->rect.w,
												Renderer2DInterface::COLOR_TEXT,
												this->alignText.x,this->alignText.y);

			if(this->wText.c_str())
				tabContainer->renderer2D->DrawText(this->wText.c_str(),
				this->rect.x,
				this->rect.y,
				this->rect.x+this->rect.z,
				this->rect.y+this->rect.w,
				Renderer2DInterface::COLOR_TEXT,
				this->alignText.x,this->alignText.y);
		}
	}

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnPaint,tabContainer,data);

	this->SelfClipEnd(tabContainer,selfClip);
	
}



////////////////////////////
////////GuiRect///////
////////////////////////////

GuiButtonFunc::GuiButtonFunc(void (*iFunc)(void*),void* iParam):func(iFunc),param(iParam){}

void GuiButtonFunc::OnLMouseUp(TabContainer* tab,void* data)
{
	GuiString::OnLMouseUp(tab);

	if(this->hovering)
	{
		if(this->func)
			this->func(this->param);
	}
}

GuiButton::GuiButton()
{
	alignText.make(0.5f,0.5f);
}
void GuiButton::OnLMouseUp(TabContainer* tab,void* data)
{
	GuiString::OnLMouseUp(tab);

	if(this->hovering)
	{
		if(this->parent)
			this->parent->OnButtonPressed(tab,this);
	}
}

void GuiButton::OnPaint(TabContainer* tab,void* data)
{
	GuiString::OnPaint(tab);
}

void GuiButtonBool::OnLMouseUp(TabContainer* tab,void* data)
{
	GuiString::OnLMouseUp(tab);

	if(this->hovering)
	{
		switch(this->updateMode)
		{
		case -1:	referenceValue=!referenceValue; break;
		case 0:		referenceValue=false;			break;
		case 1:		referenceValue=true;			break;
		}

		if(this->parent)
			this->parent->OnButtonPressed(tab,this);
	}
}

GuiScrollRect::GuiScrollRect():
contentHeight(0),
width(0),
isClipped(false)
{
	this->scrollBar=new GuiScrollBar;
	this->scrollBar->guiRect=this;
	this->scrollBar->Set(this,0,0,-1,0,0,20,0,1,0,-1,1);
}

GuiScrollRect::~GuiScrollRect()
{
	SAFEDELETE(this->scrollBar);
}

void GuiScrollRect::OnMouseWheel(TabContainer* tabContainer,void* data)
{
	GuiRect::OnMouseWheel(tabContainer,data);

	if(!this->hovering)
		return;

	float scrollValue=*(float*)data;
	this->scrollBar->Scroll(scrollValue);

	tabContainer->SetDraw(2,0,this);
}

void GuiScrollRect::OnSize(TabContainer* tabContainer,void* data)
{
	GuiRect::OnSize(tabContainer,data);

	this->scrollBar->SetScrollerRatio(this->contentHeight,this->rect.w);
	this->width=this->scrollBar->IsVisible() ? this->rect.z-GuiScrollBar::SCROLLBAR_WIDTH : this->rect.z;
}


////////////////////////////
////////GuiRect///////
////////////////////////////

void GuiPropertyString::OnPaint(TabContainer* tabContainer,void* data)
{
	bool selfClip=this->SelfClipBegin(tabContainer);

	this->DrawBackground(tabContainer);

	if(description.Buf())
		tabContainer->renderer2D->DrawText(description,this->rect.x,this->rect.y,this->rect.x+this->rect.z/2.0f,this->rect.y+this->rect.w);
	if(val.Buf())	
		tabContainer->renderer2D->DrawText(val,this->rect.x+this->rect.z/2.0f,this->rect.y,this->rect.x+this->rect.z,this->rect.y+this->rect.w);

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnPaint,tabContainer,data);

	this->SelfClipEnd(tabContainer,selfClip);
	
}

void GuiPropertyVec3::OnPaint(TabContainer* tabContainer,void* data)
{
	
	bool selfClip=this->SelfClipBegin(tabContainer);

	this->DrawBackground(tabContainer);

	char str[100];
	sprintf(str,"%3.2f , %3.2f , %3.2f",this->val.x,this->val.y,this->val.z);

	if(description.Buf())
		tabContainer->renderer2D->DrawText(description,this->rect.x,this->rect.y,this->rect.x+this->rect.z/2.0f,this->rect.y+this->rect.w);
	
	tabContainer->renderer2D->DrawText(str,this->rect.x+this->rect.z/2.0f,this->rect.y,this->rect.x+this->rect.z,this->rect.y+this->rect.w);

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnPaint,tabContainer,data);

	this->SelfClipEnd(tabContainer,selfClip);
	
}

void GuiPropertyFloat::OnPaint(TabContainer* tabContainer,void* data)
{
	
	bool selfClip=this->SelfClipBegin(tabContainer);

	this->DrawBackground(tabContainer);

	char str[100];
	sprintf(str,"%3.2f",this->val);

	if(description.Buf())
		tabContainer->renderer2D->DrawText(description,this->rect.x,this->rect.y,this->rect.x+this->rect.z/2.0f,this->rect.y+this->rect.w);

	tabContainer->renderer2D->DrawText(str,this->rect.x+this->rect.z/2.0f,this->rect.y,this->rect.x+this->rect.z,this->rect.y+this->rect.w);

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnPaint,tabContainer,data);

	this->SelfClipEnd(tabContainer,selfClip);
	
}

void GuiPropertyPtr::OnPaint(TabContainer* tabContainer,void* data)
{
	bool selfClip=this->SelfClipBegin(tabContainer);

	this->DrawBackground(tabContainer);

	char str[100];
	sprintf(str,"%3.2f",this->val);

	if(description.Buf())
		tabContainer->renderer2D->DrawText(description,this->rect.x,this->rect.y,this->rect.x+this->rect.z/2.0f,this->rect.y+this->rect.w);

	tabContainer->renderer2D->DrawText(str,this->rect.x+this->rect.z/2.0f,this->rect.y,this->rect.x+this->rect.z,this->rect.y+this->rect.w);

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnPaint,tabContainer,data);

	this->SelfClipEnd(tabContainer,selfClip);
	
}

void GuiPropertyBool::OnPaint(TabContainer* tabContainer,void* data)
{
	bool selfClip=this->SelfClipBegin(tabContainer);

	this->DrawBackground(tabContainer);

	char str[10];
	sprintf(str,"%s",this->val ? "true" : "false");

	if(description.Buf())
		tabContainer->renderer2D->DrawText(description,this->rect.x,this->rect.y,this->rect.x+this->rect.z/2.0f,this->rect.y+this->rect.w);

	tabContainer->renderer2D->DrawText(str,this->rect.x+this->rect.z/2.0f,this->rect.y,this->rect.x+this->rect.z,this->rect.y+this->rect.w);

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnPaint,tabContainer,data);

	this->SelfClipEnd(tabContainer,selfClip);
	
}

////////////////////////////
////////GuiRect///////
////////////////////////////



void GuiSlider::DrawSliderTip(TabContainer* tabContainer,void* data)
{
	
	bool selfClip=this->SelfClipBegin(tabContainer);

	float tip=(this->rect.x+10) + ((referenceValue)/(maximum-minimum))*(this->rect.z-20);
	tabContainer->renderer2D->DrawRectangle(tip-5,this->rect.y+this->rect.w/4.0f-5,tip+5,this->rect.y+this->rect.w/4.0f+5,Renderer2DInterface::COLOR_TEXT);

	this->SelfClipEnd(tabContainer,selfClip);
	
}


void GuiSlider::OnPaint(TabContainer* tabContainer,void* data)
{
	bool selfClip=this->SelfClipBegin(tabContainer);

	this->DrawBackground(tabContainer);

	tabContainer->renderer2D->DrawRectangle(this->rect.x+10,this->rect.y+this->rect.w/4.0f-2,this->rect.x+this->rect.z-10,this->rect.y+this->rect.w/4.0f+2,0x000000);

	String smin(this->minimum);
	String smax(this->maximum);
	String value(this->referenceValue);

	tabContainer->renderer2D->DrawText(smin,this->rect.x+10,this->rect.y,this->rect.x+this->rect.z-10,this->rect.y+this->rect.w,Renderer2DInterface::COLOR_TEXT,0,0.75);
	tabContainer->renderer2D->DrawText(smax,this->rect.x+10,this->rect.y,this->rect.x+this->rect.z-10,this->rect.y+this->rect.w,Renderer2DInterface::COLOR_TEXT,1,0.75);
	tabContainer->renderer2D->DrawText(value,this->rect.x+10,this->rect.y,this->rect.x+this->rect.z-10,this->rect.y+this->rect.w,Renderer2DInterface::COLOR_TEXT,0.5f,0.75);

	float tip=(this->rect.x+10) + ((referenceValue)/(maximum-minimum))*(this->rect.z-20);

	tabContainer->renderer2D->DrawRectangle(tip-5,this->rect.y+this->rect.w/4.0f-5,tip+5,this->rect.y+this->rect.w/4.0f+5,Renderer2DInterface::COLOR_TEXT);

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnPaint,tabContainer,data);

	this->SelfClipEnd(tabContainer,selfClip);
	
}

void GuiSlider::OnMouseMove(TabContainer* tabContainer,void* data)
{
	GuiRect::OnMouseMove(tabContainer,data);

	if(this->pressing)
	{
		vec2& mpos=*(vec2*)data;

		if(mpos.x > this->rect.x && mpos.x < this->rect.x+this->rect.z)
		{
			float f1=(mpos.x-(this->rect.x+10))/(this->rect.z-20);
			float f2=maximum-minimum;
			float cursor=f1*f2;

			cursor = cursor<minimum ? minimum : (cursor>maximum ? maximum : cursor);
			
			if(referenceValue!=cursor)
			{
				referenceValue=cursor;
				tabContainer->SetDraw(2,0,this);
			}
		}
	}
}

void GuiSlider::OnSize(TabContainer* tabContainer,void* data)
{
	/*float oldRatio=maximum/minimum;
	float value=this->referenceValue ? *this->referenceValue : 0;*/

	GuiRect::OnSize(tabContainer);



}

////////////////////////////
////////GuiRect///////
////////////////////////////

void GuiPropertySlider::OnPaint(TabContainer* tabContainer,void* data)
{
	bool selfClip=this->SelfClipBegin(tabContainer);

	this->DrawBackground(tabContainer);

	if(description.Buf())
	{
		String s=description + " " + String(this->slider.referenceValue);
		tabContainer->renderer2D->DrawText(s,this->rect.x,this->rect.y,this->rect.x+rect.z/2.0f,this->rect.y+this->rect.w);
	}

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnPaint,tabContainer,data);

	this->SelfClipEnd(tabContainer,selfClip);
	
}
////////////////////////////
////////GuiRect///////
////////////////////////////
GuiAnimationController::GuiAnimationController(AnimationController& iAnimationController)
	:animationController(iAnimationController),
	slider(animationController.cursor,this->animationController.start,this->animationController.end),
	play(this->animationController.play),
	stop(this->animationController.play)
{
	this->name="GuiAnimationController";

	this->Set(0,0,0,-1,0,0,0,41,0,0,1,-1);

	this->slider.Set(this,0,0,-1,0,0,0,26,0.5f,0,1,-1);
	this->play.Set(this,0,0,-1,0,0,15,15,0.5f,0.75f,-1,-1);
	this->stop.Set(this,&this->play,2,-1,20,0,15,15,-1,0.75f,-1,-1);

	this->stop.colorBackground=this->play.colorBackground=0x000000;
	this->stop.colorPressing=this->play.colorPressing=0xffffff;
	this->stop.colorHovering=this->play.colorHovering=0x88888888;

	this->play.updateMode=1;
	this->stop.updateMode=0;//set 0 onlyif 1
}


GuiPropertyAnimationController::GuiPropertyAnimationController(AnimationController& iAnimationController)
	:guiAnimationController(iAnimationController)
{
	this->name="GuiPropertyAnimationController";
	this->Set(0,0,0,-1,0,0,0,this->guiAnimationController.rect.w,0,0,1,-1);
	this->description="Controller";
	this->guiAnimationController.SetParent(this);
	this->guiAnimationController.alignPos.x=0.5f;
	this->guiAnimationController.alignRect.x=0.5f;
	/*this->name="GuiPropertyAnimationController";
	this->description="Controller";
	this->Set(this,0,0,-1,0,0,0,guiAnimationController.rect.w,0,0,0.5f,-1);
	this->guiAnimationController.SetParent(this);
	this->guiAnimationController.sibling[0]=this;
	this->guiAnimationController.alignPos.x=0.5f;
	this->guiAnimationController.alignRect.x=0.5f;*/
}

////////////////////////////
////////GuiRect///////
////////////////////////////

void GuiAnimationController::OnMouseMove(TabContainer* tab,void* data)
{
	float value=this->slider.referenceValue;

	GuiRect::OnMouseMove(tab,data);

	if(value!=this->slider.referenceValue && this->slider.pressing)
	{
		this->animationController.SetFrame(this->slider.referenceValue);
		tab->SetDraw(2,0,this);
	}
}

void GuiAnimationController::OnButtonPressed(TabContainer* tabContainer,GuiButtonBool* iButton)
{
	if(iButton==&this->play)
		this->animationController.Play();

	if(iButton==&this->stop)
		this->animationController.Stop();
}


////////////////////////////
////////GuiRect///////
////////////////////////////


GuiViewport::GuiViewport():
	renderBuffer(0),
	renderBitmap(0),
	rootEntity(0),
	needsPicking(0),
	pickedEntity(0)
{
	this->name="Viewport";
}
GuiViewport::~GuiViewport()
{
	SAFEDELETEARRAY(this->renderBuffer);
}

void GuiViewport::OnSize(TabContainer* tabContainer,void* data)
{
	GuiRect::OnSize(tabContainer,data);
}

void GuiViewport::OnPaint(TabContainer* tabContainer,void* data)
{
	bool selfClip=this->SelfClipBegin(tabContainer);

	tabContainer->renderer3D->Render(this,false);

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnPaint,tabContainer);

	this->SelfClipEnd(tabContainer,selfClip);
	
}

void GuiViewport::OnMouseWheel(TabContainer* tabContainer,void* data)
{
	GuiRect::OnMouseWheel(tabContainer);

	float factor=*(float*)data;

	this->view*=mat4().translate(0,0,factor*10);
}

void GuiViewport::OnLMouseUp(TabContainer* tabContainer,void* data)
{
	GuiRect::OnLMouseUp(tabContainer,data);

	if(this->hovering)
		TabContainer::BroadcastToPool(&TabContainer::OnGuiEntitySelected,(void*)this->pickedEntity);
}

void GuiViewport::OnMouseMove(TabContainer* tabContainer,void* data)
{
	GuiRect::OnMouseMove(tabContainer,data);

	if(this->hovering)
	{
		vec2 &mpos=*(vec2*)data;

		if(InputManager::keyboardInput.IsPressed(0x01/*VK_LBUTTON*/))
		{
			float dX=(mpos.x-this->mouseold.x);
			float dY=(mpos.y-this->mouseold.y);

			if(InputManager::keyboardInput.IsPressed(0x011/*VK_CONTROL*/))
			{
				mat4 mview;
				vec3 vx,vy,vz;
				vec3 pos;
				mat4 rot;

				mview=this->view;

				mview.traspose();
				mview.inverse();

				mview.axes(vx,vy,vz);

				pos=this->model.position();

				this->model.move(vec3());

				if(dY)
					rot.rotate(dY,vx);
				this->model.rotate(dX,0,0,1);

				this->model*=rot;

				this->model.move(pos);
			}
			else
			{
				this->view*=mat4().translate(dX,dY,0);
			}
		}

		this->needsPicking=true;

		mouseold=mpos;
	}
}


void GuiViewport::OnActivate(TabContainer* tabContainer,void* data)
{
	GuiRect::OnActivate(tabContainer);
	tabContainer->renderer3D->Register(this);
}
void GuiViewport::OnDeactivate(TabContainer* tabContainer,void* data)
{
	GuiRect::OnDeactivate(tabContainer);
	tabContainer->renderer3D->Unregister(this);
}

void GuiViewport::OnReparent(TabContainer* tabContainer,void* data)
{
	GuiRect::OnReparent(tabContainer);
}



GuiScrollBar::GuiScrollBar():
guiRect(0),
	scrollerPressed(-1),
	scrollerPosition(0),
	scrollerRatio(1),
	parentAlignRectX(0)
{
	this->name="ScrollBar";
}
GuiScrollBar::~GuiScrollBar()
{

}


bool GuiScrollBar::SetScrollerRatio(float contentHeight,float containerHeight)
{
	float oldScrollerRatio=this->scrollerRatio;

	this->scrollerRatio = (contentHeight<containerHeight) ? 1.0f : containerHeight/contentHeight;

	if(oldScrollerRatio!=this->scrollerRatio)
		SetScrollerPosition(this->scrollerPosition);

	return oldScrollerRatio!=this->scrollerRatio;
}

bool GuiScrollBar::SetScrollerPosition(float positionPercent)
{
	float oldScrollerPosition=this->scrollerPosition;

	float scrollerContainerHeight=this->GetContainerHeight();
	float scrollerHeight=this->GetScrollerHeight();

	if(positionPercent+scrollerRatio>1)
		this->scrollerPosition=(scrollerContainerHeight-scrollerHeight)/scrollerContainerHeight;
	else
		this->scrollerPosition = positionPercent < 0 ? 0 : positionPercent;

	return oldScrollerPosition!=this->scrollerPosition;
}

bool GuiScrollBar::Scroll(float upOrDown)
{
	float rowHeightRatio=this->scrollerRatio/GuiSceneViewer::TREEVIEW_ROW_HEIGHT;

	float amount=this->scrollerPosition + (upOrDown<0 ? rowHeightRatio : -rowHeightRatio);

	return this->SetScrollerPosition(amount);
}

void GuiScrollBar::SetRect(GuiRect* iRect)
{
	
}

bool GuiScrollBar::IsVisible()
{
	return this->scrollerRatio<1.0f;
}

float GuiScrollBar::GetContainerHeight()
{
	return this->rect.w-2.0f*SCROLLBAR_TIP_HEIGHT;
}
float GuiScrollBar::GetScrollerTop()
{
	return this->GetContainerTop()+this->scrollerPosition*this->GetContainerHeight();
}
float GuiScrollBar::GetScrollerBottom()
{
	return this->GetScrollerTop()+this->scrollerRatio*this->GetContainerHeight();
}
float GuiScrollBar::GetScrollerHeight()
{
	return this->GetScrollerBottom()-this->GetScrollerTop();
}
float GuiScrollBar::GetContainerTop()
{
	return this->rect.y+SCROLLBAR_TIP_HEIGHT;
}
float GuiScrollBar::GetContainerBottom()
{
	return this->rect.y+this->rect.w-SCROLLBAR_TIP_HEIGHT;
}

void GuiScrollBar::OnLMouseUp(TabContainer* tabContainer,void* data)
{
	GuiRect::OnLMouseUp(tabContainer);

	this->scrollerPressed=-1;
}

void GuiScrollBar::OnLMouseDown(TabContainer* tabContainer,void* data)
{
	GuiRect::OnLMouseDown(tabContainer,data);

	if(!this->hovering || scrollerRatio==1.0f)
		return;

	vec2& mpos=*(vec2*)data;

	if(mpos.y<this->GetContainerTop())
		this->Scroll(1);
	else if(mpos.y<this->GetContainerBottom())
	{
		this->scrollerPressed=0;

		if(mpos.y>=this->GetScrollerTop() && mpos.y<=this->GetScrollerBottom())
			this->scrollerPressed=((mpos.y-this->GetScrollerTop())/this->GetScrollerHeight())*this->scrollerRatio;
		else
			SetScrollerPosition((mpos.y-this->GetContainerTop())/this->GetContainerHeight());
	}
	else this->Scroll(-1);

	if(this->parent)
		tabContainer->SetDraw(2,0,this->parent);
}

void GuiScrollBar::OnMouseMove(TabContainer* tabContainer,void* data)
{
	GuiRect::OnMouseMove(tabContainer,data);

	if(this->scrollerRatio==1.0f || this->scrollerPressed<0)
		return;

	vec2& mpos=*(vec2*)data;

	if(mpos.y>this->GetContainerTop() && mpos.y<this->GetContainerBottom())
	{
		float mouseContainerY=(mpos.y-this->GetContainerTop())/this->GetContainerHeight();

		this->SetScrollerPosition(mouseContainerY-this->scrollerPressed);

		if(this->parent)
			tabContainer->SetDraw(2,0,this->parent);
	}
}


void GuiScrollBar::OnPaint(TabContainer* tabContainer,void* data)
{
	if(this->scrollerRatio==1.0f)
		return;

	bool selfClip=this->SelfClipBegin(tabContainer);

	tabContainer->renderer2D->DrawRectangle(this->rect.x,this->rect.y,this->rect.x+GuiScrollBar::SCROLLBAR_WIDTH,this->rect.y+GuiScrollBar::SCROLLBAR_TIP_HEIGHT,Renderer2DInterface::COLOR_GUI_BACKGROUND);
	tabContainer->renderer2D->DrawRectangle(this->rect.x,this->rect.y+this->rect.w-GuiScrollBar::SCROLLBAR_TIP_HEIGHT,this->rect.x+GuiScrollBar::SCROLLBAR_WIDTH,this->rect.y+this->rect.w,Renderer2DInterface::COLOR_GUI_BACKGROUND);

	tabContainer->renderer2D->DrawBitmap(tabContainer->iconUp,this->rect.x,this->rect.y,this->rect.x+GuiScrollBar::SCROLLBAR_WIDTH,this->rect.y+GuiScrollBar::SCROLLBAR_TIP_HEIGHT);
	tabContainer->renderer2D->DrawBitmap(tabContainer->iconDown,this->rect.x,this->rect.y+this->rect.w-GuiScrollBar::SCROLLBAR_TIP_HEIGHT,this->rect.x+GuiScrollBar::SCROLLBAR_WIDTH,this->rect.y+this->rect.w);

	tabContainer->renderer2D->DrawRectangle(this->rect.x,this->GetContainerTop(),this->rect.x+GuiScrollBar::SCROLLBAR_WIDTH,this->GetContainerBottom(),Renderer2DInterface::COLOR_GUI_BACKGROUND);
	
	tabContainer->renderer2D->DrawRectangle(this->rect.x,this->GetScrollerTop(),this->rect.x+GuiScrollBar::SCROLLBAR_WIDTH,this->GetScrollerBottom(),0x00000000);

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnPaint,tabContainer,data);

	this->SelfClipEnd(tabContainer,selfClip);
	
}

void GuiSceneViewer::OnMouseWheel(TabContainer* tabContainer,void* data)
{
	GuiRect::OnMouseWheel(tabContainer,data);

	if(this->hovering)
	{
		float wheelFactor=*(float*)data;

		this->scrollBar->Scroll(wheelFactor);

		tabContainer->SetDraw(2,0,this);
	}
}

void GuiSceneViewer::OnRMouseUp(TabContainer* tabContainer,void* data)
{
	GuiRect::OnRMouseUp(tabContainer,data);

	vec2& mpos=*(vec2*)data;

	bool eEntityExpanded=false;
	EditorEntity* eEntity = this->GetHoveredRow(this->entityRoot,mpos,vec2(-GuiRect::TREEVIEW_ROW_ADVANCE,-GuiRect::TREEVIEW_ROW_HEIGHT),eEntityExpanded);
		
	int menuResult=tabContainer->TrackGuiSceneViewerPopup(eEntity ? true : false);
	
	switch(menuResult)
	{
	case 1:
		{
			EditorEntity* newEntity=new EditorEntity;

			newEntity->name="Entity";

			newEntity->SetParent(eEntity ? eEntity : this->entityRoot);
			newEntity->bbox.a.make(-1,-1,-1);
			newEntity->bbox.b.make(1,1,1);

			newEntity->OnPropertiesCreate();

			this->UpdateNodes(this->entityRoot);
		}
		break;
	case 2:eEntity->parent->childs.erase(std::find(eEntity->parent->childs.begin(),eEntity->parent->childs.end(),eEntity));break;
	case 3:eEntity->CreateComponent<EditorLight>();break;
	case 4:eEntity->CreateComponent<EditorMesh>();break;
	case 5:eEntity->CreateComponent<EditorCamera>();break;
	case 14:eEntity->CreateComponent<EditorScript>();break;
	}

	this->OnSize(tabContainer);
	tabContainer->SetDraw(2,0,this);
}


GuiSceneViewer::GuiSceneViewer():
entityRoot(0)
{
	this->entityRoot=new EditorEntity;
	this->entityRoot->name="EntitySceneRoot";
	this->entityRoot->expanded=true;

	this->name="Scene";
}

void GuiSceneViewer::OnRecreateTarget(TabContainer* tabContainer,void* data)
{
	GuiRect::OnRecreateTarget(tabContainer);
}

GuiSceneViewer::~GuiSceneViewer()
{
	printf("destroying treeview %p\n",this);
}



void GuiSceneViewer::OnEntitiesChange(TabContainer* tabContainer,void* data)
{
	GuiRect::OnEntitiesChange(tabContainer,data);

	EditorEntity* entity=(EditorEntity*)data;

	if(entity)
		entity->SetParent(this->entityRoot);

	this->contentHeight=-(float)TREEVIEW_ROW_HEIGHT+this->UpdateNodes(this->entityRoot);

	scrollBar->SetScrollerRatio(this->contentHeight,this->rect.w);

	if(this->active)
	{
		this->OnSize(tabContainer);
		tabContainer->SetDraw(2,0,this);
	}

	this->BroadcastToChilds(&GuiRect::OnEntitiesChange,tabContainer);
}

void GuiSceneViewer::OnEntitySelected(TabContainer* tabContainer,void* data)
{
	GuiRect::OnEntitySelected(tabContainer,data);

	EditorEntity* entity=(EditorEntity*)data;

	if(entity)
	{
		if(this->selection.end()==std::find(this->selection.begin(),this->selection.end(),entity))
		{
			this->UnselectNodes(this->entityRoot);
			this->ExpandUntil(entity);
			this->selection.clear();
			this->selection.push_back(entity);

			this->UpdateNodes(this->entityRoot);
			this->OnSize(tabContainer);

			entity->selected=true;

			entity->CreateComponent<EditorGizmo>();

			tabContainer->SetDraw(2,0,this);
		}
	}
}

void GuiSceneViewer::ExpandUntil(EditorEntity* iTarget)
{
	iTarget->expanded=true;

	if(iTarget->parent)
		GuiSceneViewer::ExpandUntil((EditorEntity*)iTarget->parent);
}

void GuiSceneViewer::UnselectNodes(EditorEntity* node)
{
	node->selected=false;

	for(std::vector<EntityComponent*>::iterator i=node->components.begin();i!=node->components.end();)
		(*i)->is<EditorGizmo>() ? i=node->components.erase(i) : i++ ; 

	for(std::list<Entity*>::iterator nCh=node->childs.begin();nCh!=node->childs.end();nCh++)
		this->UnselectNodes((EditorEntity*)*nCh);
}

EditorEntity* GuiSceneViewer::GetHoveredRow(EditorEntity* iEntityNode,vec2& iMousePos,vec2& iFramePos,bool& oExpandos)
{
	float tDrawFromHeight=this->scrollBar->scrollerPosition*this->contentHeight;

	if(iFramePos.y+TREEVIEW_ROW_HEIGHT>=tDrawFromHeight && iFramePos.y<=tDrawFromHeight+this->rect.w)
	{
		float tRelativeY=this->rect.y+iFramePos.y-tDrawFromHeight;

		float tCursor=this->rect.x+iFramePos.x+TREEVIEW_ROW_ADVANCE*iEntityNode->level;

		oExpandos= iEntityNode->childs.size() && (iMousePos.x>tCursor && iMousePos.x<tCursor+TREEVIEW_ROW_ADVANCE);

		if(iMousePos.y>tRelativeY && iMousePos.y<tRelativeY+GuiSceneViewer::TREEVIEW_ROW_HEIGHT)
			return iEntityNode;
	}

	iFramePos.y+=TREEVIEW_ROW_HEIGHT;

	if(iEntityNode->expanded)
	{
		for(std::list<Entity*>::iterator nCh=iEntityNode->childs.begin();nCh!=iEntityNode->childs.end();nCh++)
		{
			EditorEntity* tHoveredEntity=this->GetHoveredRow((EditorEntity*)*nCh,iMousePos,iFramePos,oExpandos);
			if(tHoveredEntity)
				return tHoveredEntity;
		}
	}

	return 0;
}

void GuiSceneViewer::OnLMouseDown(TabContainer* tabContainer,void* iData)
{
	GuiRect::OnLMouseDown(tabContainer,iData);

	if(!this->hovering)
		return;

	vec2& tMousePos=*(vec2*)iData;

	if(tMousePos.x<this->rect.x+this->width)
	{
		bool eEntityExpandosPressed=false;
		EditorEntity* eEntity=this->GetHoveredRow(this->entityRoot,tMousePos,vec2(-TREEVIEW_ROW_ADVANCE,-TREEVIEW_ROW_HEIGHT),eEntityExpandosPressed);
	
		if(eEntity)
		{
			if(!eEntityExpandosPressed)
			{
				this->UnselectNodes(this->entityRoot);

				if(!eEntity->selected)
					eEntity->selected=true;
			}
			else
			{
				eEntity->expanded=!eEntity->expanded;

				this->UpdateNodes(this->entityRoot);
				this->OnSize(tabContainer);
			}
				
			if(!InputManager::keyboardInput.IsPressed(0x11/*VK_CONTROL*/))
				this->selection.clear();

			this->selection.push_back(eEntity);

			TabContainer::BroadcastToPool(&TabContainer::OnGuiEntitySelected,this->selection[0]);
		}

		tabContainer->SetDraw(2,0,this);
	}
}


int GuiSceneViewer::UpdateNodes(EditorEntity* node)
{
	if(!node)
		return 0;

	if(node==this->entityRoot)
		this->contentHeight=0;
	else
		this->contentHeight += TREEVIEW_ROW_HEIGHT;

	if(node->expanded)
	{
		for(std::list<Entity*>::iterator nCh=node->childs.begin();nCh!=node->childs.end();nCh++)
			this->UpdateNodes((EditorEntity*)*nCh);
	}

	return this->contentHeight;
}

void GuiSceneViewer::DrawNodes(TabContainer* tabContainer,EditorEntity* node,vec2& pos)
{
	if(!node)
		return;

	float drawFromHeight=this->scrollBar->scrollerPosition*this->contentHeight;

	if(pos.y+TREEVIEW_ROW_HEIGHT>=drawFromHeight && pos.y<=drawFromHeight+this->rect.w)
	{
		float relativeY=this->rect.y+pos.y-drawFromHeight;

		if(node->selected)
			tabContainer->renderer2D->DrawRectangle(0,(float)relativeY,(float)this->width,(float)relativeY+GuiSceneViewer::TREEVIEW_ROW_HEIGHT,Renderer2DInterface::COLOR_TAB_SELECTED);

		float xCursor=this->rect.x+pos.x+TREEVIEW_ROW_ADVANCE*node->level;

		if(node->childs.size())
		{
			tabContainer->renderer2D->DrawBitmap(node->expanded ? tabContainer->iconDown : tabContainer->iconRight,xCursor,relativeY,xCursor+TabContainer::CONTAINER_ICON_WH,relativeY+GuiSceneViewer::TREEVIEW_ROW_HEIGHT);
			xCursor+=TREEVIEW_ROW_ADVANCE;
		}

		tabContainer->renderer2D->DrawText(node->name,xCursor,relativeY,xCursor+this->width,relativeY+GuiSceneViewer::TREEVIEW_ROW_HEIGHT,Renderer2DInterface::COLOR_TEXT,-1,0.5);
	}
	else if(pos.y>drawFromHeight)
		return;

	pos.y+=TREEVIEW_ROW_HEIGHT;

	if(node->expanded)
	{
		for(std::list<Entity*>::iterator nCh=node->childs.begin();nCh!=node->childs.end();nCh++)
			this->DrawNodes(tabContainer,(EditorEntity*)*nCh,pos);
	}

}


void GuiSceneViewer::OnPaint(TabContainer* tabContainer,void* data)
{
	bool selfClip=this->SelfClipBegin(tabContainer);

	this->DrawBackground(tabContainer);

	tabContainer->renderer2D->PushScissor(this->rect.x,this->rect.y,this->rect.x+this->width,this->rect.y+this->rect.w);

	this->DrawNodes(tabContainer,this->entityRoot,vec2(-TREEVIEW_ROW_ADVANCE,-TREEVIEW_ROW_HEIGHT));

	tabContainer->renderer2D->PopScissor();

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnPaint,tabContainer,data);

	this->SelfClipEnd(tabContainer,selfClip);
	
}

GuiEntityViewer::GuiEntityViewer():
entity(0),tabContainer(0)
{
	this->name="Entity";
};

GuiEntityViewer::~GuiEntityViewer()
{
	printf("destroying properties %p\n",this);
}

void GuiEntityViewer::OnEntitySelected(TabContainer* tabContainer,void* data)
{
	GuiRect::OnEntitySelected(tabContainer);

	EditorEntity* iEntity=(EditorEntity*)data;

	if(iEntity && this->entity!=iEntity)
	{
		if(this->entity)
		{
			this->BroadcastToChilds(&GuiRect::OnDeactivate,tabContainer);
			this->entity->properties.SetParent(0);
			this->entity->properties.SetClip(0);
			this->scrollBar->SetParent(0);
		}

		this->entity=iEntity;
		this->entity->properties.SetParent(this);

		this->scrollBar->SetParent(this);
		this->entity->properties.SetClip(this);

		this->CalcNodesHeight(&iEntity->properties);
		this->scrollBar->SetScrollerPosition(0);

		this->OnSize(tabContainer);
		this->entity->properties.OnActivate(tabContainer);
	}
	else
		this->OnSize(tabContainer);

	tabContainer->SetDraw(2,0,this);
}

void GuiEntityViewer::OnExpandos(TabContainer* tabContainer,void* data)
{
	this->CalcNodesHeight(&this->entity->properties);
	this->OnSize(tabContainer);
}

void GuiEntityViewer::OnPaint(TabContainer* tabContainer,void* data)
{
	bool selfClip=this->SelfClipBegin(tabContainer);

	tabContainer->renderer2D->DrawRectangle(this->rect.x,this->rect.y,this->rect.x+this->width,this->rect.y+this->rect.w,Renderer2DInterface::COLOR_GUI_BACKGROUND);

	if(this->entity)
		this->entity->properties.OnPaint(tabContainer);

	this->scrollBar->OnPaint(tabContainer);

	this->SelfClipEnd(tabContainer,selfClip);
}

void GuiEntityViewer::OnActivate(TabContainer* iTabContainer,void* data)
{
	tabContainer=iTabContainer;

	GuiRect::OnActivate(tabContainer);
}

void GuiEntityViewer::OnLMouseDown(TabContainer* tabContainer,void* data)
{
	vec2& mpos=*(vec2*)data;

	if(this->entity)
		this->entity->properties.OnLMouseDown(tabContainer,vec2(mpos.x,mpos.y+this->scrollBar->scrollerPosition*this->contentHeight));

	this->scrollBar->OnLMouseDown(tabContainer,data);
}

void GuiEntityViewer::OnMouseWheel(TabContainer* tabContainer,void* data)
{
	if(this->_contains(this->rect,vec2(tabContainer->mousex,tabContainer->mousey)))
	{
		this->scrollBar->Scroll(*(float*)data);
		tabContainer->SetDraw(2,0,this);
	}

	GuiScrollRect::OnMouseWheel(tabContainer,data);
}

void GuiEntityViewer::OnMouseMove(TabContainer* tabContainer,void* data)
{
	vec2& mpos=*(vec2*)data;

	if(this->entity)
		this->entity->properties.OnMouseMove(tabContainer,vec2(mpos.x,mpos.y+this->scrollBar->scrollerPosition*this->contentHeight));

	this->scrollBar->OnMouseMove(tabContainer,data);
}

bool GuiEntityViewer::ProcessMouseInput(vec2&,vec2&,GuiRect* node)
{
	return false;
}
void GuiEntityViewer::DrawNodes(TabContainer*,GuiRect* node,vec2&)
{

}
int GuiEntityViewer::CalcNodesHeight(GuiRect* node)
{
	if(!node && this->entity)
		return 0;

	this->contentHeight=0;

	for(std::vector<GuiRect*>::iterator nCh=this->entity->properties.childs.begin();nCh!=this->entity->properties.childs.end();nCh++)
	{
		GuiRect* prop=(*nCh);
		this->contentHeight+=prop->rect.w;
	}

	return this->contentHeight;
}





GuiProjectViewer::GuiProjectViewer():
	splitterLeft(false),
	splitterRight(false),
	hotspotDist(0)
{
	this->name="Project";

	left.Set(this,0,0,-1,0,0,0,0,-1,0,-1,1);
	right.Set(this,0,0,-1,0,0,0,0,-1,0,-1,1);
	viewer.Set(this,0,0,-1,0,0,0,0,-1,0,-1,1);

	this->rootResource.fileName=AppInterface::instance->projectFolder;
	this->rootResource.expanded=true;
	this->rootResource.isDir=true;

	left.rootResource=&this->rootResource;
	right.rootResource=&this->rootResource;

	left.selectedDirs.push_back(&this->rootResource);
}

GuiProjectViewer::~GuiProjectViewer()
{
	printf("destroying resources %p\n",this);
}

ResourceNode::ResourceNode():
	level(0),
	isDir(0),
	selectedLeft(0),
	selectedRight(0)
{}
ResourceNode::~ResourceNode(){}

ResourceNodeDir::ResourceNodeDir():expanded(0){}
ResourceNodeDir::~ResourceNodeDir(){}

void GuiProjectViewer::OnActivate(TabContainer* tabContainer,void* data)
{
	GuiRect::OnActivate(tabContainer);

	AppInterface::instance->ScanDir(this->rootResource.fileName);
	AppInterface::instance->CreateNodes(this->rootResource.fileName,&this->rootResource);

	this->left.CalcNodesHeight(&this->rootResource);
	this->right.CalcNodesHeight(&this->rootResource);

	float tWidth=tabContainer->windowData->width/3.0f;

	left.rect.x=0;
	left.rect.z=tWidth-2;
	right.rect.x=tWidth+2;
	right.rect.z=tWidth-4;
	viewer.rect.x=tWidth*2+2;
	viewer.rect.z=tWidth;

	this->OnSize(tabContainer,data);
}

void GuiProjectViewer::OnLMouseDown(TabContainer* tabContainer,void* data)
{
	GuiRect::OnLMouseDown(tabContainer,data);

	if(this->hovering)
	{
		vec2& mpos=*(vec2*)data;

		if(mpos.x<=this->right.rect.x)
		{
			this->splitterLeft=true;
			this->hotspotDist=this->right.rect.x-mpos.x;
		}
		else if(mpos.x<=this->viewer.rect.x)
		{
			this->splitterRight=true;
			this->hotspotDist=this->viewer.rect.x-mpos.x;
		}
	}
}

void GuiProjectViewer::OnLMouseUp(TabContainer* tabContainer,void* data)
{
	if(this->pressing)
	{
		this->splitterLeft=false;
		this->splitterRight=false;
	}

	GuiRect::OnLMouseUp(tabContainer);
}

void GuiProjectViewer::OnMouseMove(TabContainer* tabContainer,void* data)
{

	if(this->hovering)
	{
		tabContainer->SetCursor(1);

		if(this->pressing)
		{
			vec2& mpos=*(vec2*)data;

			if(this->splitterLeft)
			{
				float tRightWidthAbs=this->right.rect.x+this->right.rect.z;
				this->left.rect.z=mpos.x-2;
				this->right.rect.x=mpos.x+2;
				this->right.rect.z=this->viewer.rect.x-this->right.rect.x-4;

				this->left.OnSize(tabContainer);
				this->right.OnSize(tabContainer);
			}
			if(this->splitterRight)
			{
				this->right.rect.z=mpos.x-this->right.rect.x-2;
				this->viewer.rect.x=mpos.x+2;
				this->viewer.rect.z=this->rect.x+this->rect.z-this->viewer.rect.x;

				this->right.OnSize(tabContainer);
				this->viewer.OnSize(tabContainer);
			}

			

			tabContainer->SetDraw(1,0,0);
		}
	}

	GuiRect::OnMouseMove(tabContainer,data);
}

void GuiProjectViewer::OnReparent(TabContainer* tabContainer,void* data)
{
	GuiRect::OnReparent(tabContainer);

	tabContainer->OnGuiSize();
	tabContainer->OnGuiRecreateTarget();
}


void GuiProjectViewer::OnPaint(TabContainer* tabContainer,void* data)
{
	bool selfClip=this->SelfClipBegin(tabContainer);

	tabContainer->renderer2D->DrawRectangle(this->rect,Renderer2DInterface::COLOR_MAIN_BACKGROUND,true);

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnPaint,tabContainer,data);

	this->SelfClipEnd(tabContainer,selfClip);
	
}

void GuiProjectViewer::OnSize(TabContainer* tabContainer,void* data)
{
	GuiRect::OnSize(tabContainer);

	this->viewer.rect.z=this->rect.x+this->rect.z-this->viewer.rect.x;
}













/*
void GuiProjectViewer::GuiProjectFileViewer::OnRMouseUp(TabContainer* tabContainer,void* data)
{
	GuiRect::OnRMouseUp(tabContainer,data);

	vec2& mpos=*(vec2*)data;

	EditorEntity* expChanged=0;
	EditorEntity* selChanged=0;
	EditorEntity* curHover=0;

	bool iSelected = this->ProcessMouseInput(mpos,vec2(-GuiRect::TREEVIEW_ROW_ADVANCE,-GuiRect::TREEVIEW_ROW_HEIGHT),this->entityRoot,true,expChanged,selChanged,curHover) ?
		true : false;

	int menuResult=tabContainer->TrackGuiSceneViewerPopup(iSelected);

	switch(menuResult)
	{
	case 1:
		{
			EditorEntity* newEntity=new EditorEntity;

			newEntity->name="Entity";

			newEntity->SetParent(iSelected ? this->selection[0] : this->entityRoot);
			newEntity->bbox.a.make(-1,-1,-1);
			newEntity->bbox.b.make(1,1,1);

			newEntity->OnPropertiesCreate();

			this->UpdateNodes(this->entityRoot);



		}
		break;
	case 2:curHover->parent->childs.erase(std::find(curHover->parent->childs.begin(),curHover->parent->childs.end(),curHover));break;
	case 3:curHover->CreateComponent<EditorLight>();break;
	case 4:curHover->CreateComponent<EditorMesh>();break;
	case 5:curHover->CreateComponent<EditorCamera>();break;
	case 14:curHover->CreateComponent<EditorScript>();break;
	}

	this->OnSize(tabContainer);
	tabContainer->SetDraw(2,0,this);
}
*/



void GuiProjectViewer::GuiProjectDirViewer::DrawNodes(TabContainer* tabContainer,ResourceNodeDir* node,vec2& pos,bool& terminated)
{
	if(terminated)
		return;

	float drawFromHeight=this->scrollBar->scrollerPosition*this->contentHeight;

	if(pos.y+TREEVIEW_ROW_HEIGHT>=drawFromHeight && pos.y<=drawFromHeight+this->rect.w)
	{
		float relativeY=this->rect.y+pos.y-drawFromHeight;

		if(node->selectedLeft)
			tabContainer->renderer2D->DrawRectangle(this->rect.x,relativeY,this->rect.x+this->width,(float)relativeY+GuiSceneViewer::TREEVIEW_ROW_HEIGHT,Renderer2DInterface::COLOR_TAB_SELECTED);

		float xCursor=this->rect.x+TREEVIEW_ROW_ADVANCE*node->level;

		if(node->dirs.size())
		{
			tabContainer->renderer2D->DrawBitmap(node->expanded ? tabContainer->iconDown : tabContainer->iconRight,xCursor,relativeY,xCursor+TabContainer::CONTAINER_ICON_WH,relativeY+GuiSceneViewer::TREEVIEW_ROW_HEIGHT);
			xCursor+=TREEVIEW_ROW_ADVANCE;
		}

		tabContainer->renderer2D->DrawBitmap(tabContainer->iconFolder,xCursor,relativeY,xCursor+TabContainer::CONTAINER_ICON_WH,relativeY+GuiSceneViewer::TREEVIEW_ROW_HEIGHT);

		xCursor+=TREEVIEW_ROW_ADVANCE;

		tabContainer->renderer2D->DrawText(node->fileName,xCursor,relativeY,this->width,relativeY+GuiSceneViewer::TREEVIEW_ROW_HEIGHT,Renderer2DInterface::COLOR_TEXT,-1,0.5f);


	}

	pos.y+=TREEVIEW_ROW_HEIGHT;

	if(pos.y>drawFromHeight+this->rect.w)
	{
		terminated=true;
		return;
	}

	if(node->expanded)
	{
		for(std::list<ResourceNodeDir*>::iterator nCh=node->dirs.begin();nCh!=node->dirs.end();nCh++)
			this->DrawNodes(tabContainer,*nCh,pos,terminated);
	}

	return;
}

void GuiProjectViewer::GuiProjectFileViewer::DrawNodes(TabContainer* tabContainer,ResourceNodeDir* _node,vec2& pos)
{
	float drawFromHeight=this->scrollBar->scrollerPosition*this->contentHeight;

	for(std::list<ResourceNodeDir*>::iterator nCh=_node->dirs.begin();nCh!=_node->dirs.end();nCh++)
	{
		if(pos.y+TREEVIEW_ROW_HEIGHT>=drawFromHeight && pos.y<=drawFromHeight+this->rect.w)
		{
			float relativeY=this->rect.y+pos.y-drawFromHeight;

			ResourceNodeDir* node=(*nCh);

			if(node->selectedRight)
				tabContainer->renderer2D->DrawRectangle(this->rect.x,relativeY,this->rect.x+this->width,(float)relativeY+GuiSceneViewer::TREEVIEW_ROW_HEIGHT,Renderer2DInterface::COLOR_TAB_SELECTED);

			float xCursor=this->rect.x;

			tabContainer->renderer2D->DrawBitmap(tabContainer->iconFolder,xCursor,relativeY,xCursor+TabContainer::CONTAINER_ICON_WH,relativeY+GuiSceneViewer::TREEVIEW_ROW_HEIGHT);

			xCursor+=TREEVIEW_ROW_ADVANCE;

			tabContainer->renderer2D->DrawText(node->fileName,xCursor,relativeY,xCursor+this->width,relativeY+GuiSceneViewer::TREEVIEW_ROW_HEIGHT,Renderer2DInterface::COLOR_TEXT,-1,0.5f);
		}
		else if(pos.y>drawFromHeight)
			return;

		pos.y+=TREEVIEW_ROW_HEIGHT;
	}

	for(std::list<ResourceNode*>::iterator nCh=_node->files.begin();nCh!=_node->files.end();nCh++)
	{
		if(pos.y+TREEVIEW_ROW_HEIGHT>=drawFromHeight && pos.y<=drawFromHeight+this->rect.w)
		{
			float relativeY=this->rect.y+pos.y-drawFromHeight;

			ResourceNode* node=(*nCh);

			if(node->selectedRight)
				tabContainer->renderer2D->DrawRectangle(this->rect.x,relativeY,this->rect.x+this->width,relativeY+GuiSceneViewer::TREEVIEW_ROW_HEIGHT,Renderer2DInterface::COLOR_TAB_SELECTED);

			float xCursor=this->rect.x;
			tabContainer->renderer2D->DrawBitmap(tabContainer->iconFile,xCursor,relativeY,xCursor+TabContainer::CONTAINER_ICON_WH,relativeY+GuiSceneViewer::TREEVIEW_ROW_HEIGHT);

			xCursor+=TREEVIEW_ROW_ADVANCE;

			tabContainer->renderer2D->DrawText(node->fileName,xCursor,relativeY,xCursor+rect.z,relativeY+GuiSceneViewer::TREEVIEW_ROW_HEIGHT,Renderer2DInterface::COLOR_TEXT,-1,0.5f);
		}
		else if(pos.y>drawFromHeight)
			return;

		pos.y+=TREEVIEW_ROW_HEIGHT;
	}

	return;
}

int GuiProjectViewer::GuiProjectDirViewer::CalcNodesHeight(ResourceNodeDir* node)
{
	if(!node)
		return 0;

	if(node==this->rootResource)
		this->contentHeight=0;

	this->contentHeight += node->isDir  ? TREEVIEW_ROW_HEIGHT : 0;

	if(node->expanded)
	{
		for(std::list<ResourceNodeDir*>::iterator nCh=node->dirs.begin();nCh!=node->dirs.end();nCh++)
			this->CalcNodesHeight(*nCh);
	}

	return this->contentHeight;
}

int GuiProjectViewer::GuiProjectFileViewer::CalcNodesHeight(ResourceNodeDir* node)
{
	if(!node)
		return 0;

	return this->contentHeight=(node->dirs.size() + node->files.size())*TREEVIEW_ROW_HEIGHT;
}


void GuiProjectViewer::GuiProjectDirViewer::UnselectNodes(ResourceNodeDir* node)
{
	if(!node)
		return;

	node->selectedLeft=false;

	for(std::list<ResourceNode*>::iterator nCh=node->files.begin();nCh!=node->files.end();nCh++)
		(*nCh)->selectedLeft=0;

	for(std::list<ResourceNodeDir*>::iterator nCh=node->dirs.begin();nCh!=node->dirs.end();nCh++)
		this->UnselectNodes(*nCh);
}

void GuiProjectViewer::GuiProjectFileViewer::UnselectNodes(ResourceNodeDir* node)
{
	if(!node)
		return;

	node->selectedRight=false;

	for(std::list<ResourceNode*>::iterator nCh=node->files.begin();nCh!=node->files.end();nCh++)
		(*nCh)->selectedRight=0;

	for(std::list<ResourceNodeDir*>::iterator nCh=node->dirs.begin();nCh!=node->dirs.end();nCh++)
		this->UnselectNodes(*nCh);
}


ResourceNodeDir* GuiProjectViewer::GuiProjectDirViewer::GetHoveredRow(ResourceNodeDir* iResourceNodeDirNode,vec2& iMousePos,vec2& iFramePos,bool& oExpandos)
{
	float tDrawFromHeight=this->scrollBar->scrollerPosition*this->contentHeight;

	if(iFramePos.y+TREEVIEW_ROW_HEIGHT>=tDrawFromHeight && iFramePos.y<=tDrawFromHeight+this->rect.w)
	{
		float tRelativeY=this->rect.y+iFramePos.y-tDrawFromHeight;

		float tCursor=this->rect.x+iFramePos.x+TREEVIEW_ROW_ADVANCE*iResourceNodeDirNode->level;

		oExpandos= iResourceNodeDirNode->dirs.size() && (iMousePos.x>tCursor && iMousePos.x<tCursor+TREEVIEW_ROW_ADVANCE);

		if(iMousePos.y>tRelativeY && iMousePos.y<tRelativeY+GuiSceneViewer::TREEVIEW_ROW_HEIGHT)
			return iResourceNodeDirNode;
	}

	iFramePos.y+=TREEVIEW_ROW_HEIGHT;

	if(iResourceNodeDirNode->expanded)
	{
		for(std::list<ResourceNodeDir*>::iterator nCh=iResourceNodeDirNode->dirs.begin();nCh!=iResourceNodeDirNode->dirs.end();nCh++)
		{
			ResourceNodeDir* tHoveredEntity=this->GetHoveredRow((ResourceNodeDir*)*nCh,iMousePos,iFramePos,oExpandos);
			if(tHoveredEntity)
				return tHoveredEntity;
		}
	}

	return 0;
}

void GuiProjectViewer::GuiProjectDirViewer::OnLMouseDown(TabContainer* iTabContainer,void* iData)
{
	GuiRect::OnLMouseDown(iTabContainer,iData);

	if(!this->hovering)
		return;

	vec2& tMousePos=*(vec2*)iData;


	bool resourceNodeDirExpanded=false;

	ResourceNodeDir* resourceNodeDir=this->GetHoveredRow(this->rootResource,tMousePos,vec2(),resourceNodeDirExpanded);

	if(resourceNodeDir)
	{
		if(!resourceNodeDirExpanded)
		{
			this->UnselectNodes(this->rootResource);

			if(!resourceNodeDir->selectedLeft)
				resourceNodeDir->selectedLeft=true;

			this->CalcNodesHeight(this->rootResource);
			this->OnSize(iTabContainer);
		}
		else
			resourceNodeDir->expanded=!resourceNodeDir->expanded;

		if(!InputManager::keyboardInput.IsPressed(0x11/*VK_CONTROL*/))
			this->selectedDirs.clear();

		this->selectedDirs.push_back(resourceNodeDir);

		iTabContainer->SetDraw(2,0,this);
	}
}

ResourceNode* GuiProjectViewer::GuiProjectFileViewer::GetHoveredRow(ResourceNodeDir* iResourceNodeDirNode,vec2& iMousePos,vec2& iFramePos,bool& oExpandos)
{
	float drawFromHeight=this->scrollBar->scrollerPosition*this->contentHeight;

	for(std::list<ResourceNodeDir*>::iterator dir=iResourceNodeDirNode->dirs.begin();dir!=iResourceNodeDirNode->dirs.end();dir++)
	{
		if(iFramePos.y+TREEVIEW_ROW_HEIGHT>=drawFromHeight && iFramePos.y<=drawFromHeight+this->rect.w)
		{
			float relativeY=this->rect.y+iFramePos.y-drawFromHeight;

			ResourceNodeDir* node=(*dir);

			float xCursor=this->rect.x+TREEVIEW_ROW_ADVANCE*node->level;

			if(iMousePos.y>relativeY && iMousePos.y<relativeY+GuiSceneViewer::TREEVIEW_ROW_HEIGHT)
				return node;
		}

		iFramePos.y+=TREEVIEW_ROW_HEIGHT;
	}

	for(std::list<ResourceNode*>::iterator file=iResourceNodeDirNode->files.begin();file!=iResourceNodeDirNode->files.end();file++)
	{
		if(iFramePos.y+TREEVIEW_ROW_HEIGHT>=drawFromHeight && iFramePos.y<=drawFromHeight+this->rect.w)
		{
			float relativeY=this->rect.y+iFramePos.y-drawFromHeight;

			ResourceNode* node=(*file);

			float xCursor=this->rect.x+TREEVIEW_ROW_ADVANCE*node->level;

			if(iMousePos.y>relativeY && iMousePos.y<relativeY+GuiSceneViewer::TREEVIEW_ROW_HEIGHT)
				return node;

		}

		iFramePos.y+=TREEVIEW_ROW_HEIGHT;
	}

	return 0;
}
void GuiProjectViewer::GuiProjectFileViewer::OnLMouseDown(TabContainer* tabContainer,void* data)
{
	GuiRect::OnLMouseDown(tabContainer,data);

	if(!this->hovering)
		return;

	vec2& mpos=*(vec2*)data;

	bool exp=false;
	ResourceNode* node=this->GetHoveredRow(this->rootResource,mpos,vec2(),exp);

	if(node)
	{
		this->UnselectNodes(this->rootResource);

		if(!node->selectedRight)
			node->selectedRight=true;

		if(exp)
		{
			this->CalcNodesHeight(this->rootResource);
			this->OnSize(tabContainer);
		}

		if(!InputManager::keyboardInput.IsPressed(0x11/*VK_CONTROL*/))
			this->selectedFiles.clear();

		this->selectedFiles.push_back(node);

		//TabContainer::BroadcastToPool(&TabContainer::OnGuiEntitySelected,this->selection[0]);

		tabContainer->SetDraw(2,0,this);
	}	
}

void GuiProjectViewer::GuiProjectDirViewer::OnPaint(TabContainer* tabContainer,void* data)
{
	bool selfClip=this->SelfClipBegin(tabContainer);

	this->DrawBackground(tabContainer);

	tabContainer->renderer2D->PushScissor(this->rect.x,this->rect.y,this->rect.x+this->width,this->rect.y+this->rect.w);

	bool terminated=false;
	this->DrawNodes(tabContainer,this->rootResource,vec2(),terminated);

	tabContainer->renderer2D->PopScissor();

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnPaint,tabContainer,data);

	this->SelfClipEnd(tabContainer,selfClip);
	
}


void GuiProjectViewer::GuiProjectFileViewer::OnPaint(TabContainer* tabContainer,void* data)
{
	bool selfClip=this->SelfClipBegin(tabContainer);

	this->DrawBackground(tabContainer);

	tabContainer->renderer2D->PushScissor(this->rect.x,this->rect.y,this->rect.x+this->width,this->rect.y+this->rect.w);

	this->DrawNodes(tabContainer,this->rootResource,vec2());

	tabContainer->renderer2D->PopScissor();

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnPaint,tabContainer,data);

	this->SelfClipEnd(tabContainer,selfClip);
	
}

///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////GuiScriptViewer/////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
GuiImage::GuiImage():
width(0),
height(0),
bpp(0)
{}

GuiImage::~GuiImage()
{
	this->width=-1;
	this->height=-1;
	this->bpp=-1;
}

///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////GuiScriptViewer/////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////

GuiScriptViewer::GuiScriptViewer():script(0),cursor(0){this->name="Script";}

void GuiScriptViewer::Open(Script* iScript)
{
	this->script=iScript;
	this->cursor=0;


	if(!iScript->file.IsOpen())
	{
		if(iScript->file.Open())
		{
			int size=iScript->file.Size();

			if(size>0)
			{
				char* buf=new char[size+1];
				fread(buf,size,1,iScript->file.cData);
				buf[size]='\0';
				buffer=buf;
				delete [] buf;
			}

			iScript->file.Close();
		}
	}
}

bool GuiScriptViewer::Save()
{
	if(this->script)
	{
		if(!File::Exist(this->script->file.path))
			File::Create(this->script->file.path);

		if(this->script->file.Open("wb"))
		{
			int writed=fwrite(this->buffer.c_str(),this->buffer.size(),1,this->script->file.cData);

			this->script->file.Close();

			return true;
		}
		else
			__debugbreak();
	}

	return false;
} 


bool GuiScriptViewer::Compile()
{
	bool exited=false;
	bool compiled=false;
	bool runned=false;

	if(this->script)
	{
		exited=AppInterface::instance->compiler->Unload(this->script);

		compiled=AppInterface::instance->compiler->Compile(this->script);

		runned=AppInterface::instance->compiler->Load(this->script);
	}

	return exited && compiled && runned;
}

void GuiScriptViewer::OnPaint(TabContainer* tabContainer,void* data)
{
	bool selfClip=this->SelfClipBegin(tabContainer);

	this->DrawBackground(tabContainer);

	if(this->script)
	{
		tabContainer->renderer2D->DrawRectangle(this->rect.x,this->rect.y,this->rect.x+this->rect.z,this->rect.y+this->rect.w,Renderer2DInterface::COLOR_GUI_BACKGROUND);
		tabContainer->renderer2D->DrawText(this->buffer.c_str(),this->rect.x,this->rect.y,this->rect.x+this->rect.z,this->rect.y+this->rect.w);
	}

	if(this->container!=0)
		this->BroadcastToChilds(&GuiRect::OnPaint,tabContainer,data);

	this->SelfClipEnd(tabContainer,selfClip);
	
}

void GuiScriptViewer::OnKeyDown(TabContainer* tabContainer,void* iData)
{
	if(this->script)
	{
		if(iData)
		{
			char charcode=*(int*)iData;

			if(InputManager::keyboardInput.IsPressed(0x11/*VK_CONTROL*/) && !InputManager::keyboardInput.IsPressed(0x12/*VK_ALT*/))
			{
				if(InputManager::keyboardInput.IsPressed('S'))
				{
					this->Save();
					this->Compile();
				}
			}
			else
			{
				switch(charcode)
				{
					case 0x08:/*VK_BACK*/
						this->cursor>0 ? --this->cursor : 0 ;
						this->buffer.erase(this->cursor,1);
						break;
					default:
					{
						charcode=='\r' ? charcode='\n' : 0;
						char token[2]={charcode,'\0'};
						this->buffer.insert(this->cursor,token);
						this->cursor++;
					}
				}

				tabContainer->SetDraw(2,0,this);
			}
			
			
		}
		else
		{
			if(InputManager::keyboardInput.IsPressed(0x25/*VK_LEFT*/))
				this->cursor>0 ? --this->cursor : 0 ;
			if(InputManager::keyboardInput.IsPressed(0x27/*VK_RIGHT*/))
				this->cursor<this->buffer.size() ? this->cursor++ : 0 ;
			/*if(InputManager::keyboardInput.IsPressed(0x26/ *VK_UP* /))
				this->cursor>0 ? --this->cursor : 0 ;
			if(InputManager::keyboardInput.IsPressed(0x28/ *VK_DOWN* /))
				this->cursor>0 ? --this->cursor : 0 ;*/

			tabContainer->SetDraw(2,0,this);
		}
	}

	GuiRect::OnKeyDown(tabContainer,iData);
}

void GuiScriptViewer::OnKeyUp(TabContainer* tabContainer,void* data)
{
	GuiRect::OnKeyUp(tabContainer,data);
}

///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
GuiCompilerViewer::GuiCompilerViewer(){this->name="Compiler";}

wchar_t* nthOccurrenceInLine(wchar_t* iStr,char iChar,int iNth)
{
	wchar_t* str=iStr;
	int occurr=0;

	char c=*str;

	while(c!='\0' || c!='\n')
	{
		if(c==iChar)
		{
			if(++occurr==iNth)
				return str;
		}

		c=*(++str);
	}

	return 0;
}


bool GuiCompilerViewer::ParseCompilerOutputFile(TabContainer* tabContainer,wchar_t* fileBuffer)
{
	this->lines.clear();
	this->DestroyChilds();

	if(fileBuffer)
	{
		wchar_t* LineBegin=fileBuffer;
		wchar_t* FileEnd=LineBegin;
		while(*FileEnd++);

		while(LineBegin!=FileEnd-1)
		{
			wchar_t* LineEnd=wcschr(LineBegin,'\n');

			wchar_t* compileError=wcsstr(LineBegin,L"error C");
			wchar_t* linkError=wcsstr(LineBegin,L"error LNK");

			compileError!=0 && LineEnd < compileError ? compileError=0 : 0;
			linkError!=0 && LineEnd < linkError ? linkError=0 : 0;

			bool simpleMessage=!compileError && !linkError;

			OutputLine* _line=new OutputLine;
			
			if(simpleMessage)
			{
				_line->message=std::wstring(LineBegin,LineEnd-LineBegin);

				this->lines.push_back(_line);
			}
			else
			{
				wchar_t* FileEnd=nthOccurrenceInLine(LineBegin,':', compileError ? 2 : 1);//the first : should be the volume drive

				if(FileEnd)
					FileEnd+=2;

				wchar_t* ErrorEnd=nthOccurrenceInLine(FileEnd,':',1);

				if(ErrorEnd)
					ErrorEnd+=2;

				_line->file=std::wstring(LineBegin,FileEnd-LineBegin);
				_line->error=std::wstring(FileEnd,ErrorEnd-FileEnd);
				_line->message=std::wstring(ErrorEnd,LineEnd-ErrorEnd);

				this->lines.push_back(_line);
			}
			LineBegin=++LineEnd;
		}

		for(size_t i=0;i<this->lines.size();i++)
			this->PushMessage(this->lines[i]->message,this->lines[i]->error,this->lines[i]->file);

		this->OnSize(tabContainer);
		this->OnActivate(tabContainer);

		return true;
	}

	return false;
}


void GuiCompilerViewer::PushMessage(std::wstring iMessage,std::wstring iError,std::wstring iFile)
{
	GuiString* compilerMessageRect=new GuiString;

	compilerMessageRect->wText.append(iError).append(iMessage);
	compilerMessageRect->rect.w=20;
	compilerMessageRect->alignRect.y=-1;
	compilerMessageRect->alignText.make(-1,0.5f);

	if(iError.size())
		compilerMessageRect->colorBackground=0xff0000;

	compilerMessageRect->colorHovering=compilerMessageRect->colorBackground+100;

	this->AppendChild(compilerMessageRect);
}

///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////

#define __APPENDCOMPONENTTOENTITY()	EditorEntity* eEntity=(EditorEntity*)this->entity; \
										eEntity->properties.AppendChild(&this->properties); \
										TabContainer::BroadcastToPool(&TabContainer::OnGuiEntitySelected,0);



void EditorEntity::OnPropertiesCreate()
{
	std::vector<GuiRect*> lvl(2);

	lvl[0]=this->properties.Container("Entity");
	lvl[0]->Property("Name",this->name);
	char cptr[sizeof(void*)*2+3];
	sprintf(cptr,"0x%p",this);
	lvl[0]->Property("Ptr",cptr);
	lvl[0]->Property("Position",this->world.position());
	lvl[1]=lvl[0]->Container("AABB");
	lvl[1]->Property("min",this->bbox.a);
	lvl[1]->Property("max",this->bbox.b);
	lvl[1]->Property("Volume",this->bbox.b-this->bbox.a);
	lvl[0]->Property("Child Num",String((int)this->childs.size()));
}

void EditorEntity::OnPropertiesUpdate(TabContainer* tab)
{
	for(std::vector<EntityComponent*>::iterator it=this->components.begin();it!=this->components.end();it++)
	{
		EditorProperties* componentProperties=dynamic_cast<EditorProperties*>(*it);
		if(componentProperties)
			componentProperties->OnPropertiesUpdate(tab);
	}
}

/*
void EditorEntity::update()
{
	for(std::vector<EntityComponent*>::iterator it=this->components.begin();it!=this->components.end();it++)
	{
		(*it)->update();

	}

	this->parent ? this->world=(this->local * this->parent->world) : this->world;

	for(std::list<Entity*>::iterator it=this->childs.begin();it!=this->childs.end();it++)
		(*it)->update();
}*/

void EditorMesh::OnPropertiesCreate()
{
	this->properties.text="Mesh";
	this->properties.Property("Controlpoints",String(this->ncontrolpoints));
	this->properties.Property("Normals",String(this->nnormals));
	this->properties.Property("Polygons",String(this->npolygons));
	this->properties.Property("Texcoord",String(this->ntexcoord));
	this->properties.Property("Vertexindices",String(this->nvertexindices));

	__APPENDCOMPONENTTOENTITY();
}

void EditorMesh::OnPropertiesUpdate(TabContainer* tab)
{
}

void EditorSkin::OnPropertiesCreate()
{
	this->properties.text="Skin";
	this->properties.Property("Clusters",String(this->nclusters));
	this->properties.Property("Textures",String(this->ntextures));

	__APPENDCOMPONENTTOENTITY();
}
void EditorSkin::OnPropertiesUpdate(TabContainer* tab)
{
}
void EditorRoot::OnPropertiesCreate()
{
	this->properties.text="Root";

	__APPENDCOMPONENTTOENTITY();
}
void EditorRoot::OnPropertiesUpdate(TabContainer* tab)
{
}
void EditorSkeleton::OnPropertiesCreate()
{
	this->properties.text="Skeleton";

	__APPENDCOMPONENTTOENTITY();
}
void EditorSkeleton::OnPropertiesUpdate(TabContainer* tab)
{
}
void EditorGizmo::OnPropertiesCreate()
{
	this->properties.text="Gizmo";

	__APPENDCOMPONENTTOENTITY();
}
void EditorGizmo::OnPropertiesUpdate(TabContainer* tab)
{
}
void EditorAnimation::OnPropertiesCreate()
{
	this->properties.text="Animation";
	this->properties.Property("IsBone",String(this->entity->findComponent<Bone>() ? "true" : "false"));
	this->properties.Property("Duration",String(this->end-this->start));
	this->properties.Property("Begin",this->start);
	this->properties.Property("End",this->end);

	__APPENDCOMPONENTTOENTITY();
}
void EditorAnimation::OnPropertiesUpdate(TabContainer* tab)
{
}
void EditorAnimationController::OnPropertiesCreate()
{
	this->properties.text="AnimationController";
	//this->properties.Property("Number of nodes",(float&)this->animations.size());
	this->properties.Property("Velocity",this->speed,this->start,this->end);
	this->properties.Property("Duration",String(this->end-this->start));
	this->properties.Property("Begin",this->start);
	this->properties.Property("End",this->end);
	guiPropertyAnimationController=this->properties.Property(*this);

	__APPENDCOMPONENTTOENTITY();
}

void EditorAnimationController::OnPropertiesUpdate(TabContainer* tab)
{
	if(this->oldCursor!=this->cursor)
		tab->SetDraw(2,0,&guiPropertyAnimationController->guiAnimationController.slider);

	this->oldCursor=this->cursor;
}



void EditorBone::OnPropertiesCreate()
{
	this->properties.text="Bone";

	__APPENDCOMPONENTTOENTITY();
}
void EditorBone::OnPropertiesUpdate(TabContainer* tab)
{
}
void EditorLight::OnPropertiesCreate()
{
	this->properties.text="Light";

	__APPENDCOMPONENTTOENTITY();
}
void EditorLight::OnPropertiesUpdate(TabContainer* tab)
{
}

void launchScriptEditorCallback(void* iData)
{
	EditorScript* editorScript=(EditorScript*)iData;

	TabContainer* tabContainer=AppInterface::instance->mainAppWindow->containers[0]->tabContainers[0];

	if(!tabContainer)
		__debugbreak();

	if(GuiScriptViewer::pool.empty())
		tabContainer->tabs.ScriptViewer();
	
	GuiScriptViewer* guiScriptViewer=GuiScriptViewer::pool.front();

	if(guiScriptViewer)
	{
		guiScriptViewer->Open(editorScript);
		tabContainer->SetDraw(0,1);
	}

	
}

void compileScriptCallback(void* iData)
{
	EditorScript* editorScript=(EditorScript*)iData;

    AppInterface::instance->compiler->Compile(editorScript);
}

void EditorScript::OnPropertiesCreate()
{
	this->properties.text="Script";
	GuiRect* fileProp=this->properties.Property("File",this->Script::file.path);
	this->properties.Property("Running",this->Script::runtime ? "true" : "false");

	GuiButtonFunc* buttonEdit=new GuiButtonFunc;
	this->properties.AppendChild(buttonEdit);
	buttonEdit->func=launchScriptEditorCallback;
	buttonEdit->param=this;
	//buttonEdit->colorBackground=Renderer2DInterface::COLOR_GUI_BACKGROUND;
	buttonEdit->colorHovering=Renderer2DInterface::COLOR_GUI_BACKGROUND+30;
	buttonEdit->colorPressing=Renderer2DInterface::COLOR_GUI_BACKGROUND+90;
	buttonEdit->text="Edit";
	buttonEdit->rect.w=20;
	buttonEdit->alignRect.make(1,-1);

	GuiButtonFunc* buttonCompile=new GuiButtonFunc;
	this->properties.AppendChild(buttonCompile);
	buttonCompile->func=compileScriptCallback;
	buttonCompile->param=this;
	//buttonEdit->colorBackground=Renderer2DInterface::COLOR_GUI_BACKGROUND;
	buttonCompile->colorHovering=Renderer2DInterface::COLOR_GUI_BACKGROUND+30;
	buttonCompile->colorPressing=Renderer2DInterface::COLOR_GUI_BACKGROUND+90;
	buttonCompile->text="Compile";
	buttonCompile->rect.w=20;
	buttonCompile->alignRect.make(1,-1);

	__APPENDCOMPONENTTOENTITY();
}
void EditorScript::OnPropertiesUpdate(TabContainer* tab)
{
}

void EditorScript::OnResourcesCreate()
{
	String tFileNamePath=AppInterface::instance->projectFolder + "\\" + this->entity->name;
	this->file.SetFilename(tFileNamePath + ".cpp");

	if(!File::Exist(this->file.path))
	{
		if(!File::Create(this->file.path))
			__debugbreak();

		if(this->file.Open("wb"))
		{
			String content="#include \"entities.h\"\n\nstruct " + this->entity->name + "_ : EntityScript\n{\n\tvoid init()\n\t{\n\t\tprintf(\"inited\\n\");\n\t}\n\n\tvoid update()\n\t{\n\t\tthis->entity->local.translate(0.1f,0,0);\n\t}\n\n\tvoid deinit()\n\t{\n\t\tprintf(\"deinited\\n\");\n\t}\n\n};\n";
			int contantCount=content.Count();

			this->file.Write((void*)content.Buf(),contantCount,1);
			this->file.Close();
		}
	}
}

void EditorCamera::OnPropertiesCreate()
{
	this->properties.text="Camera";

	__APPENDCOMPONENTTOENTITY();
}
void EditorCamera::OnPropertiesUpdate(TabContainer* tab)
{
}
